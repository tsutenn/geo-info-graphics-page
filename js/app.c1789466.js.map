{"version":3,"file":"js/app.c1789466.js","mappings":"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","sources":["webpack://geo-info-graphics-v1/./src/App.vue","webpack://geo-info-graphics-v1/./src/components/home.vue","webpack://geo-info-graphics-v1/./src/components/home.vue?2f3e","webpack://geo-info-graphics-v1/./src/components/instance.vue","webpack://geo-info-graphics-v1/./src/components/instance.vue?e797","webpack://geo-info-graphics-v1/./src/components/about.vue","webpack://geo-info-graphics-v1/./src/components/about.vue?a1db","webpack://geo-info-graphics-v1/./src/components/gallery.vue","webpack://geo-info-graphics-v1/./src/components/gallery.vue?fea4","webpack://geo-info-graphics-v1/./src/App.vue?7ccd","webpack://geo-info-graphics-v1/./src/plugins/vuetify.js","webpack://geo-info-graphics-v1/./src/plugins/webfontloader.js","webpack://geo-info-graphics-v1/./src/main.js","webpack://geo-info-graphics-v1/webpack/bootstrap","webpack://geo-info-graphics-v1/webpack/runtime/chunk loaded","webpack://geo-info-graphics-v1/webpack/runtime/create fake namespace object","webpack://geo-info-graphics-v1/webpack/runtime/define property getters","webpack://geo-info-graphics-v1/webpack/runtime/ensure chunk","webpack://geo-info-graphics-v1/webpack/runtime/get javascript chunk filename","webpack://geo-info-graphics-v1/webpack/runtime/get mini-css chunk filename","webpack://geo-info-graphics-v1/webpack/runtime/global","webpack://geo-info-graphics-v1/webpack/runtime/hasOwnProperty shorthand","webpack://geo-info-graphics-v1/webpack/runtime/load script","webpack://geo-info-graphics-v1/webpack/runtime/make namespace object","webpack://geo-info-graphics-v1/webpack/runtime/publicPath","webpack://geo-info-graphics-v1/webpack/runtime/jsonp chunk loading","webpack://geo-info-graphics-v1/webpack/startup"],"sourcesContent":["<template>\r\n  <v-app>\r\n    <v-main>\r\n      <v-app-bar :elevation=\"2\">\r\n        <v-app-bar-title>Geo-Info Graphics WebUI</v-app-bar-title>\r\n        <v-app-bar-nav-icon @click=\"drawer = !drawer\"></v-app-bar-nav-icon>\r\n\r\n        <template v-slot:extension>\r\n          <v-tabs v-model=\"currentItem\" fixed-tabs>\r\n            <v-tab :value=\"'home'\">\r\n              <v-icon>mdi-home</v-icon>\r\n            </v-tab>\r\n\r\n            <v-tab v-for=\"item in items\" :key=\"item\" :value=\"'tab-' + item\">\r\n              {{ item }}\r\n            </v-tab>\r\n\r\n            <v-menu v-if=\"more.length\">\r\n              <template v-slot:activator=\"{ props }\">\r\n                <v-btn class=\"align-self-center me-4\" height=\"100%\" width=\"fit-content\" rounded=\"0\" variant=\"plain\"\r\n                  v-bind=\"props\">\r\n                  <v-icon>mdi-menu-down</v-icon>\r\n                </v-btn>\r\n              </template>\r\n\r\n              <v-list class=\"bg-grey-lighten-3\">\r\n                <v-list-item v-for=\"item in more\" :key=\"item\" @click=\"addItem(item)\">\r\n                  {{ item }}\r\n                </v-list-item>\r\n              </v-list>\r\n            </v-menu>\r\n\r\n            <v-tab :value=\"'gallery'\">\r\n              <v-text>Gallery</v-text>\r\n            </v-tab>\r\n\r\n            <v-tab :value=\"'about'\">\r\n              <v-text>About</v-text>\r\n            </v-tab>\r\n          </v-tabs>\r\n        </template>\r\n      </v-app-bar>\r\n\r\n      <v-window v-model=\"currentItem\" style=\"height: 100%; width: 100%;\">\r\n        <v-window-item :value=\"'home'\" style=\"display: flex; height: 100%; width: 100%;\">\r\n          <homeTab></homeTab>\r\n        </v-window-item>\r\n\r\n        <v-window-item v-for=\"item in items.concat(more)\" :key=\"item\" :value=\"'tab-' + item\"\r\n          style=\"display: flex; height: 100%; width: 100%;\">\r\n          <instanceTab :value=\"item\" :geoData=\"geoData\" :infoData=\"infoData[item]\" :isNumerical=\"infoDataType[item] == 'numerical'\" :propName=\"infoDataName[item]\"></instanceTab>\r\n        </v-window-item>\r\n        <v-window-item :value=\"'about'\" style=\"display: flex; height: 100%; width: 100%;\">\r\n          <aboutTab></aboutTab>\r\n        </v-window-item>\r\n        <v-window-item :value=\"'gallery'\" style=\"display: flex; height: 100%; width: 100%;\">\r\n          <galleryTab></galleryTab>\r\n        </v-window-item>\r\n      </v-window>\r\n\r\n    </v-main>\r\n  </v-app>\r\n</template>\r\n\r\n<script>\r\nimport * as d3 from 'd3';\r\nimport { ref, provide } from 'vue';\r\n\r\nimport homeTab from './components/home.vue'\r\nimport instanceTab from './components/instance.vue'\r\nimport aboutTab from './components/about.vue'\r\nimport galleryTab from './components/gallery.vue'\r\n\r\nexport default {\r\n  name: 'App',\r\n\r\n  components: {\r\n    homeTab,\r\n    instanceTab,\r\n    aboutTab,\r\n    galleryTab,\r\n  },\r\n\r\n  data: () => ({\r\n    drawer: true,\r\n  }),\r\n\r\n  setup() {\r\n    const items = ref([]);\r\n    const more = ref([]);\r\n    // more.value.push(\"about\");\r\n\r\n    const geoData = ref({});\r\n    const infoData = ref({});\r\n    const infoDataType = ref({});\r\n    const infoDataName = ref({})\r\n\r\n    const currentItem = ref('home');\r\n    const currentItemAbout = ref('about');\r\n    const currentItemGallery = ref('gallery');\r\n\r\n    const loadJson = (na) => {\r\n      return new Promise((resolve, reject) => {\r\n        d3.json(na).then(data => {\r\n          resolve(data);\r\n        }).catch(error => {\r\n          console.error('Error loading GeoJSON data:', error);\r\n          reject(error);\r\n        });\r\n      });\r\n    };\r\n\r\n    const uniqueName = (namesArray, name) => {\r\n      let newName = name.replace(/\\..+$/, '');\r\n      let count = 1;\r\n\r\n      // 检查数组中是否包含该名字，如果包含，则在名字后添加后缀\r\n      while (namesArray.includes(newName)) {\r\n        newName = `${name.replace(/\\..+$/, '')}-${count}`;\r\n        count++;\r\n      }\r\n\r\n      return newName;\r\n    }\r\n\r\n    Promise.all([\r\n            loadJson('europe.geojson'),\r\n            loadJson('olympics_data.json')\r\n        ])\r\n      .then(([data, annotationData]) => {\r\n        geoData.value = data;\r\n\r\n        if (geoData.value && geoData.value.features && annotationData) {\r\n          geoData.value.features.forEach(feature => {\r\n            const annotationInfo = annotationData.find(item => item.country === feature.properties.NAME);\r\n            const annotation = annotationInfo ? annotationInfo.annotation : -1;\r\n            feature.properties.annotation = annotation;\r\n          });\r\n        }\r\n      });\r\n\r\n    const loadInfoData = (data) => {\r\n      const value = uniqueName(items.value, data.name)\r\n      infoData.value[value] = data.data;\r\n      infoDataType.value[value] = data.datatype;\r\n      infoDataName.value[value] = data.prop;\r\n      items.value.unshift(value);\r\n\r\n      currentItem.value = 'tab-' + value;\r\n      currentItemAbout.value = 'tab-' + value;\r\n      currentItemGallery.value = 'tab-' + value;\r\n    };\r\n\r\n    provide('loadInfoData', loadInfoData);\r\n    return { items, more, geoData, infoData, infoDataType, infoDataName, currentItem, currentItemAbout, currentItemGallery, loadJson, uniqueName };\r\n  },\r\n\r\n  methods: {\r\n    addItem(item) {\r\n      const removed = this.items.splice(-1, 1)\r\n      this.items.unshift(\r\n        ...this.more.splice(this.more.indexOf(item), 1),\r\n      )\r\n      this.more.unshift(...removed)\r\n      this.$nextTick(() => { this.currentItem = 'tab-' + item })\r\n      this.$nextTick(() => { this.currentItemAbout = 'tab-' + item })\r\n      this.$nextTick(() => { this.currentItemGallery = 'tab-' + item})\r\n    },\r\n  },\r\n}\r\n</script>\r\n","<template>\r\n    <v-container>\r\n        <v-row>\r\n            <h1>Home</h1>\r\n        </v-row>\r\n\r\n        <v-row style=\"margin-top: 34px;\">\r\n            <v-divider></v-divider>\r\n        </v-row>\r\n\r\n        <v-row style=\"margin-top: 30px;\">\r\n            <p>Start a new project form a JSON:</p>\r\n        </v-row>\r\n\r\n        <!-- <v-row style=\"margin-top: 15px;\">\r\n            <u @click=\"openDialog()\">Upload a JSON</u>\r\n        </v-row>\r\n\r\n        <v-row style=\"margin-top: 30px;\">\r\n            <v-divider></v-divider>\r\n        </v-row>\r\n\r\n        <v-row style=\"margin-top: 30px;\">\r\n            <p>Recent project:</p>\r\n        </v-row>\r\n\r\n        <v-row></v-row> -->\r\n        <v-row style=\"margin-top: 30px;\">\r\n            <v-file-input v-model=\"files\" label=\"Choose a JSON file\" accept=\".json\" @change=\"uploadFile\"></v-file-input>\r\n        </v-row>\r\n\r\n        <v-row v-if=\"uploaded\">\r\n            <v-col>Country: {{ Object.keys(infoData.data).length }} rows</v-col>\r\n            <v-col></v-col>\r\n        </v-row>\r\n\r\n        <v-row v-if=\"uploaded\">\r\n            <v-col>Prop: '{{ infoData.prop }}'</v-col>\r\n            <v-col>\r\n                <v-select label=\"prop data type\" v-model=\"infoData.datatype\"\r\n                    :items=\"['numerical', 'nominal']\"></v-select>\r\n            </v-col>\r\n\r\n\r\n        </v-row>\r\n\r\n        <v-row v-if=\"uploaded\" style=\"margin-bottom: 12px;\">\r\n            <v-divider></v-divider>\r\n        </v-row>\r\n\r\n\r\n        <v-row>\r\n            <v-btn color=\"primary\" @click=\"createInstance\" :disabled=\"!uploaded\">Create</v-btn>\r\n            <v-btn @click=\"clear\" style=\"margin-left: 16px;\">CLEAR</v-btn>\r\n        </v-row>\r\n    </v-container>\r\n\r\n    <!-- <v-dialog v-model=\"dialog\" max-width=\"500px\">\r\n        <template>\r\n            <u @click=\"openDialog\" style=\"cursor: pointer;\">Upload a JSON</u>\r\n        </template>\r\n<v-card>\r\n    <v-card-title>Upload JSON Files</v-card-title>\r\n    <v-card-text>\r\n        <v-file-input v-model=\"files\" label=\"Choose a JSON file\" accept=\".json\" @change=\"uploadFile\"></v-file-input>\r\n\r\n    </v-card-text>\r\n    <v-card-actions>\r\n        <v-btn color=\"primary\" @click=\"createInstance\" :disabled=\"!uploaded\">Create</v-btn>\r\n        <v-btn @click=\"dialog = false\">Close</v-btn>\r\n    </v-card-actions>\r\n</v-card>\r\n</v-dialog> -->\r\n</template>\r\n\r\n<script>\r\nimport * as d3 from 'd3';\r\nimport { inject } from 'vue';\r\n\r\nexport default {\r\n    name: 'homeTab',\r\n\r\n    data() {\r\n        return {\r\n            files: [],\r\n            infoData: {},\r\n\r\n            uploaded: false,\r\n        };\r\n    },\r\n    methods: {\r\n        clear() {\r\n            this.files = [];\r\n            this.infoData = {};\r\n            this.targetKey = 'NaN'\r\n            this.uploaded = false;\r\n        },\r\n\r\n        readFile(file) {\r\n            return new Promise((resolve, reject) => {\r\n                const reader = new FileReader();\r\n                reader.onload = function (e) {\r\n                    const fileContents = e.target.result;\r\n                    d3.json(fileContents)\r\n                        .then(data => {\r\n                            const keys = Object.keys(data[0]);\r\n                            const targetKey = keys.find(key => key !== 'country');\r\n\r\n                            const infoData = data.reduce((acc, cur) => {\r\n                                acc[cur['country']] = cur[targetKey];\r\n                                return acc;\r\n                            }, {});\r\n                            const result = {\r\n                                \"name\": file.name,\r\n                                \"prop\": targetKey,\r\n                                \"datatype\": isNaN(Object.values(data[0])[1]) ? 'nominal' : 'numerical',\r\n                                \"data\": infoData\r\n                            };\r\n\r\n                            resolve(result);\r\n                        })\r\n                        .catch(error => {\r\n                            console.error(error);\r\n                            reject(error);\r\n                        });\r\n                };\r\n                reader.readAsDataURL(file);\r\n            });\r\n        },\r\n\r\n        uploadFile() {\r\n            if (this.files.length === 0) {\r\n                console.log(\"No files to upload.\");\r\n                return;\r\n            }\r\n\r\n            const file = this.files[0]; // 获取第一个文件\r\n\r\n            this.readFile(file)\r\n                .then(result => {\r\n                    this.infoData = result;\r\n                    this.uploaded = true;\r\n                })\r\n                .catch(error => {\r\n                    this.uploaded = false;\r\n                    console.error(error);\r\n                });\r\n        },\r\n\r\n        createInstance() {\r\n            this.loadInfoData(this.infoData);\r\n        }\r\n    },\r\n\r\n    setup() {\r\n        const loadInfoData = inject('loadInfoData');\r\n\r\n        return { loadInfoData };\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n    font-size: 56px;\r\n}\r\n</style>","import { render } from \"./home.vue?vue&type=template&id=43a3dd6b&scoped=true\"\nimport script from \"./home.vue?vue&type=script&lang=js\"\nexport * from \"./home.vue?vue&type=script&lang=js\"\n\nimport \"./home.vue?vue&type=style&index=0&id=43a3dd6b&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-43a3dd6b\"]])\n\nexport default __exports__","<template>\r\n    <div style=\"display: flex; height: 100%; width: 100%;\">\r\n        <v-card elevation=\"2\" height=\"100%\" width=\"35%\" ref=\"selectorCard\">\r\n            <v-container style=\"display: flex; overflow-y: auto;\" :id=\"value + '-seContainer'\">\r\n                <v-expansion-panels>\r\n                    <v-expansion-panel>\r\n                        <v-expansion-panel-title>\r\n                            Basic Map Representations\r\n                        </v-expansion-panel-title>\r\n\r\n                        <v-expansion-panel-text>\r\n                            <v-container class=\"container\">\r\n                                <v-row>\r\n                                    <v-col class=\"element\" @click=\"setRepresentation(myType['Political Map'])\">\r\n                                        Political Map\r\n                                        <v-img :src=\"require('../assets/PoliticalMap.svg')\" contain />\r\n                                    </v-col>\r\n\r\n                                    <!-- <v-col class=\"element\" @click=\"setRepresentation(myType['Topographic Map'])\">\r\n                                        Topographic Map\r\n                                        <v-img :src=\"require('../assets/TopographicMap.svg')\" contain />\r\n                                    </v-col> -->\r\n                                    <v-col class=\"element\" @click=\"setRepresentation(myType['Shape-based Map'])\">\r\n                                        Shape-based Map\r\n                                        <v-img :src=\"require('../assets/Shape-basedMap.svg')\" contain />\r\n                                    </v-col>\r\n                                </v-row>\r\n\r\n                                <!-- <v-row>\r\n                                    <v-col class=\"element\" @click=\"setRepresentation(myType['Shape-based Map'])\">\r\n                                        Shape-based Map\r\n                                        <v-img :src=\"require('../assets/Shape-basedMap.svg')\" contain />\r\n                                    </v-col>\r\n\r\n                                    <v-col class=\"element\" @click=\"setRepresentation(myType['Street Map'])\">\r\n                                        Street Map\r\n                                        <v-img :src=\"require('../assets/StreetMap.svg')\" contain />\r\n                                    </v-col>\r\n                                </v-row> -->\r\n\r\n                                <v-row>\r\n                                    <v-col class=\"element\" @click=\"setRepresentation(myType['Plain'])\">\r\n                                        Plain\r\n                                        <v-img :src=\"require('../assets/GridCartogram.svg')\" contain />\r\n                                    </v-col>\r\n\r\n                                    <v-col></v-col>\r\n                                </v-row>\r\n                            </v-container>\r\n                        </v-expansion-panel-text>\r\n                    </v-expansion-panel>\r\n\r\n                    <v-expansion-panel>\r\n                        <v-expansion-panel-title>\r\n                            Map Projections\r\n                        </v-expansion-panel-title>\r\n\r\n                        <v-expansion-panel-text>\r\n                            <v-container class=\"container\">\r\n                                <v-row>\r\n                                    <v-col class=\"element\" @click=\"setProjection(myType['Mercator'])\">\r\n                                        Mercator\r\n                                        <v-img :src=\"require('../assets/mercator.svg')\" contain />\r\n                                    </v-col>\r\n\r\n                                    <v-col class=\"element\" @click=\"setProjection(myType['Equirectangular'])\">\r\n                                        Equirectangular\r\n                                        <v-img :src=\"require('../assets/equirectangular.svg')\" contain />\r\n                                    </v-col>\r\n                                </v-row>\r\n                            </v-container>\r\n                        </v-expansion-panel-text>\r\n                    </v-expansion-panel>\r\n\r\n                    <v-expansion-panel>\r\n                        <v-expansion-panel-title>\r\n                            Encoding Channels\r\n                        </v-expansion-panel-title>\r\n                        <v-expansion-panel-text>\r\n                            <v-container class=\"container\">\r\n                                <v-row>\r\n                                    <v-col>\r\n                                        <input type=\"button\" id=\"myButton\" class=\"colorfulButton\" v-model=ifDoubleEncodingText @click=\"doubleEncoding()\"/>\r\n                                    </v-col>\r\n                                    <v-col>\r\n                                        <input type=\"button\" id=\"myButtonRemove\" class=\"colorfulButton\" v-model=removeText @click=\"setEncodingChannel(myType['Remove'])\"/>\r\n                                    </v-col>\r\n                                    \r\n                                </v-row>\r\n\r\n                                <v-row>\r\n                                    <div class=\"row-with-line\"></div>\r\n                                    <v-col class=\"element\" @click=\"setEncodingChannel(myType['Color (Luminance)'])\">\r\n                                        Color (Intensity)\r\n                                        <v-img :src=\"require('../assets/Color(Luminance).svg')\" contain />\r\n                                    </v-col>\r\n\r\n                                    <v-col class=\"element\" @click=\"setEncodingChannel(myType['Color (Hue)'])\">\r\n                                        Color (Hue)\r\n                                        <v-img :src=\"require('../assets/Color(Hue).svg')\" contain />\r\n                                    </v-col>\r\n                                </v-row>\r\n                                \r\n                                <v-row>\r\n                                    <div class=\"row-with-line\"></div>\r\n                                    <v-col class=\"element\" @click=\"setEncodingChannel(myType['3D Length'])\">\r\n                                        3D Length\r\n                                        <v-img :src=\"require('../assets/3DLength.svg')\" contain />\r\n                                    </v-col>\r\n\r\n                                    <v-col class=\"element\" @click=\"setEncodingChannel(myType['2D Length'])\">\r\n                                        2D Length\r\n                                        <v-img :src=\"require('../assets/BarChart.svg')\" contain />\r\n                                    </v-col>\r\n                                </v-row>\r\n\r\n                                <v-row>\r\n                                    <div class=\"row-with-line\"></div>\r\n                                    <v-col class=\"element\" @click=\"setEncodingChannel(myType['Quantity'])\">\r\n                                        Quantity\r\n                                        <v-img :src=\"require('../assets/Quantity.svg')\" contain />\r\n                                    </v-col>\r\n                                    <v-col class=\"element\" @click=\"setEncodingChannel(myType['Size'])\">\r\n                                        Size\r\n                                        <v-img :src=\"require('../assets/Size.svg')\" contain />\r\n                                    </v-col>\r\n                                </v-row>\r\n\r\n                                <v-row>\r\n                                    <div class=\"row-with-line\"></div>\r\n                                    <v-col class=\"element\" @click=\"setEncodingChannel(myType['Link (Line)'])\">\r\n                                        Tilt/Angle (Undirected)\r\n                                        <v-img :src=\"require('../assets/Link(Line).svg')\" contain />\r\n                                    </v-col>\r\n\r\n                                    <v-col class=\"element\" @click=\"setEncodingChannel(myType['Link (Arrow)'])\">\r\n                                        Tilt/Angle (Directed)\r\n                                        <v-img :src=\"require('../assets/Link(Arrow).svg')\" contain />\r\n                                    </v-col>\r\n                                </v-row>\r\n                                \r\n                                <v-row>\r\n                                    <div class=\"row-with-line\"></div>\r\n                                    <v-col class=\"element\" @click=\"setEncodingChannel(myType['Glyph'])\">\r\n                                        Glyph\r\n                                        <v-img :src=\"require('../assets/Glyph.svg')\" width=\"50%\" contain />\r\n                                    </v-col>\r\n\r\n                                    <!-- <v-col class=\"element\" @click=\"setEncodingChannel(myType['Remove'])\">\r\n                                        Remove\r\n                                        <v-img :src=\"require('../assets/Glyph.svg')\" width=\"50%\" contain />\r\n                                    </v-col> -->\r\n                                </v-row>\r\n                                \r\n                            </v-container>\r\n                        </v-expansion-panel-text>\r\n                    </v-expansion-panel>\r\n                    <v-expansion-panel>\r\n                        <v-expansion-panel-title>\r\n                            Label Positions\r\n                        </v-expansion-panel-title>\r\n\r\n                        <v-expansion-panel-text>\r\n                            <v-container class=\"container\">\r\n                                <v-row class=\"button-row\">\r\n                                    <input type=\"button\" id=\"myButtonRemoveLabel\" class=\"colorfulButton\" v-model=removeTextLabel @click=\"setLabelPosition(myType['Label Remove'])\"/>\r\n                                </v-row>\r\n                                <v-row>\r\n                                    <v-col style=\"padding: 0;\">\r\n                                        <div class=\"matched-heading\">Situated</div>\r\n                                    </v-col>\r\n                                </v-row>\r\n                                <v-row>\r\n                                    <div class=\"row-with-line\"></div>\r\n                                    <v-col class=\"element\" @click=\"setLabelPosition(myType['Label Situated'])\">\r\n                                        Situated\r\n                                        <v-img :src=\"require('../assets/Situated.svg')\" contain />\r\n                                    </v-col>\r\n\r\n                                    <v-col></v-col>\r\n                                </v-row>\r\n\r\n                                <v-row>\r\n                                    <v-col style=\"padding: 0;\">\r\n                                        <div class=\"matched-heading\">Matched</div>\r\n                                    </v-col>\r\n                                </v-row>\r\n                                <v-row>\r\n                                    <div class=\"row-with-line\"></div>\r\n                                    <v-col style=\"padding: 0;\">\r\n                                        <v-col class=\"element\" @click=\"setLabelPosition(myType['Label Text'])\">\r\n                                            Text\r\n                                            <v-img :src=\"require('../assets/MatchedText.svg')\" contain />\r\n                                        </v-col>\r\n                                        <v-col class=\"element\" @click=\"setLabelPosition(myType['Label Color'])\">\r\n                                            Color\r\n                                            <v-img :src=\"require('../assets/MathchedColor.svg')\" contain />\r\n                                        </v-col>\r\n                                    </v-col>\r\n                                    <v-col class=\"element\" @click=\"setLabelPosition(myType['Label Icon'])\">\r\n                                        Icon\r\n                                        <v-img :src=\"require('../assets/MatchedIcon.svg')\" contain />\r\n                                    </v-col>\r\n                                </v-row>\r\n\r\n                                <v-row>\r\n                                    <v-col style=\"padding: 0;\">\r\n                                        <div class=\"matched-heading\">Linked</div>\r\n                                    </v-col>\r\n                                </v-row>\r\n                                <v-row>\r\n                                    <div class=\"row-with-line\"></div>\r\n                                    <v-col style=\"padding: 0;\">\r\n                                        <v-col class=\"element\"\r\n                                            @click=\"setLabelPosition(myType['Label Convenient'])\">\r\n                                            Convenient\r\n                                            <v-img :src=\"require('../assets/LinkedConvenient.svg')\" contain />\r\n                                        </v-col>\r\n\r\n                                        <v-col class=\"element\" @click=\"setLabelPosition(myType['Label Aligned'])\">\r\n                                            Aligned\r\n                                            <v-img :src=\"require('../assets/LinkedAligned.svg')\" contain />\r\n                                        </v-col>\r\n\r\n                                    </v-col>\r\n\r\n                                    <v-col class=\"element\" @click=\"setLabelPosition(myType['Label Ordered'])\">\r\n                                        Ordered\r\n                                        <v-img :src=\"require('../assets/LinkedOrdered.svg')\" contain />\r\n                                    </v-col>\r\n                                </v-row>\r\n                            </v-container>\r\n                        </v-expansion-panel-text>\r\n                    </v-expansion-panel>\r\n                    <v-expansion-panel>\r\n                        <v-expansion-panel-title>\r\n                            Highlight Techniques\r\n                        </v-expansion-panel-title>\r\n\r\n                        <v-expansion-panel-text>\r\n                            <v-container class=\"container\">\r\n                                <v-row>\r\n                                    <input type=\"button\" id=\"myButtonRemoveHighlight\" class=\"colorfulButton\" v-model=removeTextHighlight @click=\"setHighlight(myType['Highlight Remove'])\"/>\r\n                                </v-row>\r\n                                <v-row>\r\n                                    <v-col class=\"element\" @click=\"setHighlight(myType['Light'])\">\r\n                                        Light\r\n                                        <v-img :src=\"require('../assets/HighlightLight.svg')\" contain />\r\n                                    </v-col>\r\n\r\n                                    <v-col class=\"element\" @click=\"setHighlight(myType['Color'])\">\r\n                                        Color\r\n                                        <v-img :src=\"require('../assets/HighlightColor.svg')\" contain />\r\n                                    </v-col>\r\n                                </v-row>\r\n\r\n                                <v-row>\r\n                                    <v-col class=\"element\" @click=\"setHighlight(myType['Map Pin'])\">\r\n                                        Map Pin\r\n                                        <v-img :src=\"require('../assets/HighlightMappin.svg')\" contain />\r\n                                    </v-col>\r\n\r\n                                    <v-col class=\"element\" @click=\"setHighlight(myType['3D Transformation'])\">\r\n                                        3D Transformation\r\n                                        <v-img :src=\"require('../assets/Highlight3d.svg')\" contain />\r\n                                    </v-col>\r\n                                </v-row>\r\n\r\n                                <v-row>\r\n                                    <v-col class=\"element\" @click=\"setHighlight(myType['Enlarged Portions'])\">\r\n                                        Enlarged Portions\r\n                                        <v-img :src=\"require('../assets/HighlightEnlarge.svg')\" contain />\r\n                                    </v-col>\r\n                                    <v-col class=\"element\" @click=\"setHighlight(myType['Edge Stroke'])\">\r\n                                        Contour\r\n                                        <v-img :src=\"require('../assets/HighlightEdgeStroking.svg')\" contain />\r\n                                    </v-col>\r\n                                </v-row>\r\n                            </v-container>\r\n                        </v-expansion-panel-text>\r\n                    </v-expansion-panel>\r\n                    <v-expansion-panel>\r\n                        <v-expansion-panel-title>\r\n                            Print\r\n                        </v-expansion-panel-title>\r\n                        <v-expansion-panel-text>\r\n                            <v-container class=\"container\">\r\n                                <v-row>\r\n                                    <input type=\"button\" id=\"myButtonPrint\" class=\"colorfulButton\" v-model=printText @click=\"printSVG()\"/>\r\n                                </v-row>\r\n                            </v-container>\r\n                        </v-expansion-panel-text>\r\n\r\n                    </v-expansion-panel>\r\n                </v-expansion-panels>\r\n            </v-container>\r\n        </v-card>\r\n\r\n        <v-container style=\"width: 100%; height: 100%; margin-left: 0; margin-right: 0\" :ref=\"'d3Panel'\">\r\n            <v-row>\r\n                <v-col ref=\"legendCol\">\r\n                    <svg :class=\"value + '-legend'\" style=\"height: 40px; width: 100%;\"></svg>\r\n                </v-col>\r\n                <v-col></v-col>\r\n                <v-col></v-col>\r\n                \r\n                \r\n            </v-row>\r\n            <svg :class=\"value + '-svg'\" style=\"width: 100%; height: 100%;\"></svg>\r\n            <!-- <svg :class=\"value + '-legend'\" style=\"position: absolute; top: 30px; right: 20px; width: 200px; height: 40px; z-index: 2;\"></svg> -->\r\n            <svg :id=\"value + '-enlargedView'\"\r\n                style=\"width: 200px; height: 400px; position: absolute; top: 10px; right: 10px;\"></svg>\r\n        </v-container>\r\n    </div>\r\n\r\n    <v-dialog v-model=\"errorDialog\" width=\"auto\">\r\n        <v-card max-width=\"400\" prepend-icon=\"mdi-alert-circle-outline\" :title=\"errorTitle\" :text=\"errorMessage\">\r\n            <template v-slot:actions>\r\n                <v-btn class=\"ms-auto\" text=\"Ok\" @click=\"errorDialog = false\"></v-btn>\r\n            </template>\r\n        </v-card>\r\n    </v-dialog>\r\n</template>\r\n\r\n<script>\r\nimport * as d3 from 'd3';\r\n\r\nexport default {\r\n    name: 'instanceTab',\r\n\r\n    props: {\r\n        geoData: {\r\n            type: Object,\r\n            required: true\r\n        },\r\n\r\n        infoData: {\r\n            type: Object,\r\n            required: true\r\n        },\r\n\r\n        value: {\r\n            type: String,\r\n            required: true\r\n        },\r\n\r\n        propName: {\r\n            type: String,\r\n            required: false\r\n        },\r\n\r\n        isNumerical: {\r\n            type: Boolean,\r\n            required: true\r\n        }\r\n    },\r\n\r\n    data: () => ({\r\n        representationType: 0,\r\n        projectionType: 0,\r\n        labelPositionType: -1,\r\n        encodingChannelType: -1,\r\n        highLightType: -1,\r\n\r\n        worldPopulation: 0,\r\n        mostPopulation: 0,\r\n\r\n        svg: null,\r\n        legend: null,\r\n\r\n        mapWidth: 1000,\r\n        mapHeight: 800,\r\n\r\n        legendWidth: 200,\r\n\r\n        defaultColor: '#cccccc',\r\n\r\n        errorTitle: '',\r\n        errorMessage: '',\r\n        errorDialog: false,\r\n\r\n        ifDoubleEncoding: false,\r\n        ifDoubleEncodingText: 'Dual Encoding: OFF',\r\n        removeText: 'No Encoding',\r\n        removeTextLabel: 'No Label',\r\n        removeTextHighlight: 'No Highlight',\r\n        preEncoding: -1,\r\n        preColortype: -1,\r\n\r\n        encodingChannel: () => { },\r\n        representation: () => { },\r\n        LabelPosition: () => { },\r\n\r\n        colorFunctionL: () => { },\r\n\r\n        highLights: [],\r\n        pointer2highlight: 0,\r\n\r\n        printText: 'Print',\r\n\r\n        myType: {\r\n            \"Political Map\": 0,\r\n            \"Topographic Map\": 1,\r\n            \"Shape-based Map\": 2,\r\n            \"Street Map\": 3,\r\n            \"Plain\": 4,\r\n\r\n\r\n            \"Mercator\": 0,\r\n            \"Equirectangular\": 1,\r\n\r\n            \"Light\": 0,\r\n            \"Color\": 1,\r\n            \"Map Pin\": 2,\r\n            \"3D Transformation\": 3,\r\n            \"Enlarged Portions\": 4,\r\n            \"Edge stroke\": 5,\r\n            'Highlight Remove': 6,\r\n\r\n            \"Label Situated\": 0,\r\n            \"Label Text\": 1,\r\n            \"Label Icon\": 2,\r\n            \"Label Color\": 3,\r\n            \"Label Convenient\": 4,\r\n            \"Label Aligned\": 5,\r\n            \"Label Ordered\": 6,\r\n            \"Label Remove\": 7,\r\n\r\n            \"Color (Luminance)\": 0,\r\n            \"Color (Hue)\": 1,\r\n            \"3D Length\": 2,\r\n            \"Glyph\": 3,\r\n            \"Link (Line)\": 4,\r\n            \"Link (Arrow)\": 5,\r\n            \"Size\": 6,\r\n            \"Quantity\": 7,\r\n            \"2D Length\": 8,\r\n            \"Remove\": 9,\r\n\r\n        },\r\n    }),\r\n\r\n    mounted() {\r\n        console.log(this.value, \"created, numerical:\", this.isNumerical);\r\n        console.log(this.geoData);\r\n\r\n        let worldPopulation = 0;\r\n        if (this.geoData && this.geoData.features && this.infoData) {\r\n            this.geoData.features.forEach(feature => {\r\n                const curPopulation = this.getPopulation(feature)\r\n                worldPopulation += curPopulation;\r\n                this.mostPopulation = this.mostPopulation < curPopulation ? curPopulation : this.mostPopulation;\r\n            });\r\n\r\n            console.log(this.mostPopulation);\r\n        }\r\n        this.worldPopulation = worldPopulation;\r\n\r\n        const cardEl = this.$refs.selectorCard.$el;\r\n        const legendColEl = this.$refs.legendCol.$el;\r\n\r\n        this.$nextTick(() => {\r\n            const height = cardEl.clientHeight;\r\n\r\n            const seContainer = document.getElementById(this.value + '-seContainer');\r\n            seContainer.style.maxHeight = (0.99 * height) + \"px\";\r\n\r\n            this.legendWidth = 0.87 * legendColEl.clientWidth;\r\n\r\n            this.initMap();\r\n        });\r\n    },\r\n\r\n    methods: {\r\n        initMap() {\r\n            // 获得html中的地图（svg）标签\r\n            this.svg = d3.select(\".\" + this.value + \"-svg\");\r\n            this.legend = d3.select(\".\" + this.value + \"-legend\");\r\n            this.highLights.push([]);\r\n\r\n            //根据窗口大小设置地图的大小\r\n            this.mapWidth = this.svg.node().getBoundingClientRect().width;\r\n            this.mapHeight = 0.8 * this.svg.node().getBoundingClientRect().height;\r\n\r\n            this.encodingChannel = () => {\r\n                this.svg.selectAll('path').attr(\"fill\", this.defaultColor);\r\n            };\r\n\r\n            this.representation = () => {\r\n                this.svg.selectAll('path')\r\n                    .data(this.geoData.features)\r\n                    .enter()\r\n                    .append('path')\r\n                    .attr('d', this.geoPath)\r\n                    .attr('stroke', '#ffffff');\r\n            };\r\n\r\n            // console.log(this.mapWidth, this.mapHeight);\r\n            this.setProjection(1);\r\n            this.drawSvg();\r\n        },\r\n        splitTextToLines(text, maxLineWidth) {\r\n            let words = text.split(' ');\r\n            let lines = [];\r\n            let currentLine = words[0];\r\n\r\n            for (let i = 1; i < words.length; i++) {\r\n                if ((currentLine + ' ' + words[i]).length < maxLineWidth) {\r\n                    currentLine += ' ' + words[i];\r\n                } else {\r\n                    lines.push(currentLine);\r\n                    currentLine = words[i];\r\n                }\r\n            }\r\n            lines.push(currentLine); // Add the last line\r\n\r\n            return lines;\r\n        },\r\n\r\n        //重新绘制svg\r\n        drawSvg() {\r\n            // 移除现有的 SVG\r\n            this.svg.selectAll('*').remove();\r\n            d3.select('#' + this.value + '-enlargedView').selectAll('*').remove();\r\n\r\n            this.representation();\r\n            this.encodingChannel();\r\n            this.LabelPosition();\r\n\r\n            this.highLights[this.pointer2highlight].forEach(highLight => {\r\n                highLight();\r\n            });\r\n        },\r\n\r\n\r\n        loadJson(na) {\r\n            return new Promise((resolve, reject) => {\r\n                d3.json(na).then(data => {\r\n                    resolve(data);\r\n                }).catch(error => {\r\n                    console.error('Error loading GeoJSON data:', error);\r\n                    reject(error);\r\n                });\r\n            });\r\n        },\r\n\r\n        getPopulation(d) {\r\n            // console.log(name, this.infoData[name]);\r\n            return d && d.properties && d.properties.NAME && this.infoData[d.properties.NAME]\r\n                ? this.infoData[d.properties.NAME] : -1\r\n        },\r\n\r\n        showErrorDialog(title, msg) {\r\n            this.errorTitle = title;\r\n            this.errorMessage = msg;\r\n            this.errorDialog = true;\r\n        },\r\n\r\n        // 设置 Map Representation\r\n        setRepresentation(type) {\r\n            console.log(\"Representation:\", type)\r\n\r\n            if (type === this.myType['Political Map']) {\r\n                this.representationType = type;\r\n                this.representation = () => {\r\n                    this.svg.selectAll('path')\r\n                        .data(this.geoData.features)\r\n                        .enter()\r\n                        .append('path')\r\n                        .attr('d', this.geoPath)\r\n                        .attr('stroke', '#ffffff');\r\n                };\r\n            }\r\n\r\n            else if (type === this.myType['Topographic Map']) {\r\n                this.representationType = type;\r\n            }\r\n\r\n            else if (type === this.myType['Shape-based Map']) {\r\n                this.representationType = type;\r\n\r\n                this.representation = () => {\r\n                    // this.svg.selectAll('path')\r\n                    //     .data(this.geoData.features)\r\n                    //     .enter()\r\n                    //     .append('path')\r\n                    //     .attr('d', this.geoPath)\r\n                    //     .attr('stroke', '#ffffff');\r\n\r\n                    // 为地图上的每个国家绘制点阵图\r\n                    this.geoData.features.forEach(feature => {\r\n                        // 绘制点\r\n                        // 计算每个国家边界框内网格的行数和列数\r\n                        const bounds = d3.geoBounds(feature);\r\n                        const [left, bottom] = this.geoProjection(bounds[0]);\r\n                        const [right, top] = this.geoProjection(bounds[1]);\r\n                        const w = right - left;\r\n                        const h = bottom - top;\r\n                        const rows = Math.ceil(h / 15); // 假设每20像素一个点的行距\r\n                        const columns = Math.ceil(w / 15); // 假设每20像素一个点的列距\r\n                        const pointRadius = 3; // 点的半径大小\r\n\r\n                        // 生成特定国家边界框内的点\r\n                        const points = [];\r\n                        for (let i = 0; i < rows; i++) {\r\n                            for (let j = 0; j < columns; j++) {\r\n                                const x = left + j * (w / columns);\r\n                                const y = top + i * (h / rows);\r\n                                const point = this.geoProjection.invert([x, y]);\r\n                                if (d3.geoContains(feature, point)) {\r\n                                    points.push({ x: x, y: y, properties: feature.properties });\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        this.svg.append('g')\r\n                            .attr(\"fill\", \"black\")\r\n                            .attr(\"fill-opacity\", 0.6)\r\n                            .attr(\"stroke\", \"#fff\")\r\n                            .attr(\"stroke-width\", 0.5)\r\n                            .selectAll(\"circle\")\r\n                            .data(points)\r\n                            .join(\"circle\")\r\n                            .attr(\"cx\", d => d.x)\r\n                            .attr(\"cy\", d => d.y)\r\n                            .attr(\"r\", pointRadius);\r\n                    })\r\n                };\r\n            }\r\n\r\n            else if (type === this.myType['Street Map']) {\r\n                this.representationType = type;\r\n            }\r\n            else if (type === this.myType['Plain']) {\r\n                this.representationType = type;\r\n                // this.svg.select('.grid-layer').remove();\r\n                // this.svg.select('defs').selectAll('clipPath').remove(); // 假设没有其他clipPath在使用\r\n\r\n                this.representation = () => {\r\n                    const addHighLight = (svg) => {\r\n                        const highLight = () => {\r\n                            console.log(svg);\r\n                            d3.select(svg)\r\n                                .classed('highlighted', true) // 使用类来标记高亮\r\n                                .attr('fill', '#000000');\r\n                        };\r\n\r\n                        highLight(svg);\r\n                        this.highLights[this.pointer2highlight].push(highLight);\r\n                    };\r\n\r\n                    this.svg.selectAll('path')\r\n                        .on('click', function () { addHighLight(this) });\r\n                }\r\n\r\n\r\n            }\r\n\r\n            this.drawSvg();\r\n        },\r\n\r\n        // 设置 Map Projection\r\n        setProjection(type) {\r\n            console.log(\"Map Projection:\", type);\r\n\r\n            if (type === this.myType['Mercator']) {\r\n                this.projectionType = type;\r\n\r\n                this.geoProjection = d3.geoMercator()\r\n                    .fitSize([this.mapWidth, this.mapHeight], this.geoData);\r\n            }\r\n\r\n            else if (type === this.myType['Equirectangular']) {\r\n                this.projectionType = type;\r\n\r\n                this.geoProjection = d3.geoEquirectangular()\r\n                    .fitSize([this.mapWidth, this.mapHeight], this.geoData);\r\n            }\r\n\r\n            this.geoPath = d3.geoPath().projection(this.geoProjection);\r\n            this.drawSvg();\r\n        },\r\n\r\n\r\n        setHighlight(type) {\r\n            console.log(\"Highlight Techniques:\", type);\r\n\r\n            // 重置所有路径的填充颜色到默认颜色\r\n            // this.svg.selectAll('path')\r\n            //   .attr('fill', d => this.fillColorFunction(d.properties.populationd))\r\n            //   .classed('highlighted', false); // 假设你使用了highlighted类来表示高亮\r\n\r\n            // // 移除所有之前添加的特定高亮元素\r\n            // this.svg.selectAll('.highlight-marker').remove();\r\n\r\n            // 取消之前的所有点击事件监听器\r\n            this.svg.selectAll('path').on('click', null);\r\n            // 重要：移除绑定到SVG本身的点击事件监听器\r\n            this.svg.on('click', null);\r\n            // d3.select('#' + this.value + '-enlargedView').selectAll(\"*\").remove(); \r\n            // 根据类型应用新的高亮方式\r\n            if (type === this.myType['Color']) {\r\n                this.highLightType = type;\r\n\r\n                const addHighLight = (svg) => {\r\n                    const highLight = () => {\r\n                        console.log(svg);\r\n                        d3.select(svg)\r\n                            .classed('highlighted', true) // 使用类来标记高亮\r\n                            .attr('fill', '#5959E9');\r\n                    };\r\n\r\n                    highLight(svg);\r\n                    this.highLights[this.pointer2highlight].push(highLight);\r\n                };\r\n\r\n                this.svg.selectAll('path')\r\n                    .on('click', function () { addHighLight(this) });\r\n            }\r\n\r\n            else if (type === this.myType['Light']) {\r\n                this.highLightType = type;\r\n\r\n                const addHighLight = (event, svg) => {\r\n                    const [x, y] = d3.pointer(event, svg);\r\n\r\n                    const highLight = () => {\r\n                        // 添加一个SVG图标作为光圈效果\r\n                        d3.select(svg).append('image')\r\n                            .classed('highlight-marker', true) // 使用类来标记这是一个高亮标记\r\n                            .attr('xlink:href', require('../assets/lightIcon.svg'))// 设置图像的路径\r\n                            .attr('x', x - 40) // 调整图像位置，使其中心对准点击位置\r\n                            .attr('y', y - 40) // 同上，这里的15是假设图像大小为30x30像素，需要根据实际大小调整\r\n                            .attr('width', 80) // 设置图像的宽度\r\n                            .attr('height', 80); // 设置图像的高度\r\n                    };\r\n\r\n                    highLight();\r\n                    this.highLights[this.pointer2highlight].push(highLight);\r\n                };\r\n\r\n                // 绑定一个新的点击事件监听器到SVG本身\r\n                this.svg.on('click', function (event) {\r\n                    addHighLight(event, this)\r\n                });\r\n            }\r\n\r\n            else if (type === this.myType['Map Pin']) {\r\n                this.highLightType = type;\r\n\r\n                const addHighLight = (event, svg) => {\r\n                    const [x, y] = d3.pointer(event, svg);\r\n\r\n                    const highLight = () => {\r\n                        // 添加一个SVG图标作为光圈效果\r\n                        d3.select(svg).append('image')\r\n                            .classed('highlight-marker', true) // 使用类来标记这是一个高亮标记\r\n                            .attr('xlink:href', require('../assets/locationIcon.svg'))// 设置图像的路径\r\n                            .attr('x', x - 20) // 调整图像位置，使其中心对准点击位置\r\n                            .attr('y', y - 48) // 同上，根据实际大小调整\r\n                            .attr('width', 40) // 设置图像的宽度\r\n                            .attr('height', 48); // 设置图像的高度\r\n                    };\r\n\r\n                    highLight();\r\n                    this.highLights[this.pointer2highlight].push(highLight);\r\n                };\r\n\r\n                // 绑定一个新的点击事件监听器到SVG本身\r\n                this.svg.on('click', function (event) {\r\n                    addHighLight(event, this);\r\n                });\r\n            }\r\n            else if (type === this.myType['3D Transformation']) {\r\n                this.highLightType = type;\r\n\r\n                const addHighLight = (event, svg) => {\r\n                    // eslint-disable-next-line no-unused-vars\r\n                    const [x, y] = d3.pointer(event, svg);\r\n                    const feature = d3.select(event.target).datum(); // 获取被点击的地图区域的数据\r\n                    const originalColor = d3.select(event.target).attr(\"fill\");\r\n\r\n                    // 高亮函数\r\n                    const highLight = () => {\r\n                        // 首先移除之前的高亮效果\r\n                        //this.svg.selectAll('.highlight-3d-effect').remove();\r\n\r\n                        // 然后添加一个新的具有3D效果的path\r\n                        this.svg.append('path')\r\n                            .datum(feature) // 使用同一区域的数据\r\n                            .attr('class', 'highlight-3d-effect') // 为了方便之后可能的移除\r\n                            .attr('d', this.geoPath) // 使用geoPath来保持地理形状的一致性\r\n                            .attr('fill', originalColor) // 为了简化，这里使用纯色填充表示阴影\r\n                            .attr('filter', 'url(#drop-shadow)')\r\n                            .attr('stroke-width', 2); // 应用下面定义的SVG滤镜实现阴影效果\r\n\r\n                        // 添加或确保SVG滤镜的存在\r\n                        const defs = this.svg.append('defs');\r\n\r\n                        const filter = defs.append('filter')\r\n                            .attr('id', 'drop-shadow')\r\n                            .attr('height', '130%');\r\n\r\n                        filter.append('feGaussianBlur')\r\n                            .attr('in', 'SourceAlpha')\r\n                            .attr('stdDeviation', 3)\r\n                            .attr('result', 'blur');\r\n\r\n                        filter.append('feOffset')\r\n                            .attr('in', 'blur')\r\n                            .attr('dx', 5)\r\n                            .attr('dy', 5)\r\n                            .attr('result', 'offsetBlur');\r\n\r\n                        const feMerge = filter.append('feMerge');\r\n                        feMerge.append('feMergeNode')\r\n                            .attr('in', 'offsetBlur');\r\n                        feMerge.append('feMergeNode')\r\n                            .attr('in', 'SourceGraphic');\r\n                    };\r\n\r\n                    highLight();\r\n                    this.highLights[this.pointer2highlight].push(highLight);\r\n                };\r\n\r\n                // 绑定点击事件到所有的path上\r\n                this.svg.selectAll('path').on('click', function (event) {\r\n                    addHighLight(event, this);\r\n                });\r\n            }\r\n            else if (type === this.myType['Enlarged Portions']) {\r\n                this.highLightType = type;\r\n\r\n                // 移除之前可能绑定的点击事件以避免重复\r\n                this.svg.on('click', null);\r\n\r\n                // 直接在点击事件中实现放大效果的逻辑\r\n                this.svg.on('click', (event) => {\r\n                    // 移除上一次点击留下的圆圈\r\n                    this.svg.selectAll('circle.click-circle').remove();\r\n                    this.svg.selectAll('line.click-circle').remove();\r\n\r\n                    const [x, y] = d3.pointer(event, this.svg.node());\r\n\r\n                    // 在点击位置绘制一个圆圈作为反馈\r\n                    this.svg.append('circle')\r\n                        .classed('click-circle', true) // 添加一个类以便后续可以选择并移除\r\n                        .attr('cx', x)\r\n                        .attr('cy', y)\r\n                        .attr('r', 30) // 圆的半径\r\n                        .style('fill', 'none')\r\n                        .style('stroke', '#5959E9')\r\n                        .style('stroke-width', 3);\r\n\r\n                    // 清除#enlargedView中的内容\r\n                    const enlargedView = d3.select('#' + this.value + '-enlargedView');\r\n                    enlargedView.selectAll('*').remove();\r\n\r\n                    // 在#enlargedView中创建一个新的svg元素\r\n                    const enlargedViewSvg = enlargedView.append('svg')\r\n                        .attr('width', '100%')\r\n                        .attr('height', '100%')\r\n                        .attr('viewBox', `${x - 30} ${y - 30} 60 60`);\r\n\r\n                    // 创建圆形裁剪路径\r\n                    const defs = enlargedViewSvg.append('defs');\r\n                    const clipPath = defs.append('clipPath')\r\n                        .attr('id', 'circle-clip');\r\n                    clipPath.append('circle')\r\n                        .attr('cx', x)\r\n                        .attr('cy', y)\r\n                        .attr('r', 30);\r\n\r\n                    // 复制原SVG内容到新的SVG元素中，并应用圆形裁剪路径\r\n                    enlargedViewSvg.append('g')\r\n                        .attr('clip-path', 'url(#circle-clip)')\r\n                        .html(this.svg.html());\r\n\r\n                    // 由于SVG元素被复制，我们需要重新计算transform属性以确保放大的区域正确对齐\r\n                    enlargedViewSvg.selectAll('g > svg')\r\n                        .attr('x', null)\r\n                        .attr('y', null)\r\n                        .style('transform', ` scale(2)`);\r\n\r\n                    // draw traction line\r\n                    const x1 = this.mapWidth-94, y1 = 147, r1 = 100, r = 30; // approximate centre of enlarged circle\r\n                    const d = Math.sqrt((x1-x)*(x1-x)+(y1-y)*(y1-y));\r\n                    const xa = x + r*Math.cos(Math.atan((y1-y)/(x1-x))+Math.acos((r-r1)/d));\r\n                    const ya = y + r*Math.sin(Math.atan((y1-y)/(x1-x))+Math.acos((r-r1)/d));\r\n                    const xb = x1 + r1*Math.cos(Math.atan((y1-y)/(x1-x))+Math.acos((r-r1)/d));\r\n                    const yb = y1 + r1*Math.sin(Math.atan((y1-y)/(x1-x))+Math.acos((r-r1)/d));\r\n                    const xc = x + r*Math.cos(Math.atan((y1-y)/(x1-x))-Math.acos((r-r1)/d));\r\n                    const yc = y + r*Math.sin(Math.atan((y1-y)/(x1-x))-Math.acos((r-r1)/d));\r\n                    const xd = x1 + r1*Math.cos(Math.atan((y1-y)/(x1-x))-Math.acos((r-r1)/d));\r\n                    const yd = y1 + r1*Math.sin(Math.atan((y1-y)/(x1-x))-Math.acos((r-r1)/d));\r\n                    this.svg.append('line')\r\n                        .classed('click-circle', true)\r\n                        .attr('x1', xa)\r\n                        .attr('y1', ya)\r\n                        .attr('x2', xb)\r\n                        .attr('y2', yb)\r\n                        .attr('stroke', 'grey')\r\n                        .attr('stroke-width', 1);\r\n                    this.svg.append('line')\r\n                        .classed('click-circle', true)\r\n                        .attr('x1', xc)\r\n                        .attr('y1', yc)\r\n                        .attr('x2', xd)\r\n                        .attr('y2', yd)\r\n                        .attr('stroke', 'grey')\r\n                        .attr('stroke-width', 1);\r\n                });\r\n            }\r\n            else if (type === this.myType['Edge Stroke']) {\r\n                this.highLightType = type;\r\n\r\n                const addHighLight = (event) => {\r\n                    const feature = d3.select(event.target).datum(); // 获取被点击的地图区域的数据\r\n\r\n                    // 高亮函数\r\n                    const highLight = () => {\r\n                        this.svg.append('path')\r\n                            .datum(feature) // 使用同一区域的数据\r\n                            .attr('class', 'highlight-edge-stroke') // 为了方便之后可能的移除\r\n                            .attr('d', this.geoPath) // 使用geoPath来保持地理形状的一致性\r\n                            .attr('stroke-width', 2)\r\n                            .attr('stroke', '#5959E9')\r\n                            .style('fill', 'none');\r\n                    };\r\n\r\n                    highLight();\r\n                    this.highLights[this.pointer2highlight].push(highLight);\r\n                };\r\n\r\n                // 绑定点击事件到所有的path上\r\n                this.svg.selectAll('path').on('click', function (event) {\r\n                    addHighLight(event, this);\r\n                });\r\n            }\r\n            else if (type === this.myType['Highlight Remove']) {\r\n                this.highLightType = type;\r\n                this.highLights.push([]);\r\n                this.pointer2highlight++;\r\n                this.drawSvg();\r\n            }\r\n\r\n\r\n        },\r\n\r\n        setLabelPosition(type) {\r\n            console.log(\"Label Position:\", type);\r\n            // 移除之前添加的所有标签\r\n            this.svg.selectAll(\".country-label, .annotation-box, .annotation-text, .olympic-label, .country-flag, .annotation-line\").remove();\r\n            this.svg.selectAll(\".country-color\")\r\n                .style('fill', null) // 或设置为你的默认颜色\r\n                .classed(\"country-color\", false); // 移除类，以避免对后续操作的影响\r\n            // 定义注解框的宽度、高度和间距\r\n            const boxWidth = 200; // 固定宽度\r\n            const boxHeight = 60; // 固定高度\r\n            const boxSpacing = 20; // 注解框之间的间距\r\n            if (type === this.myType['Label Situated']) {\r\n                this.labelPositionType = type;\r\n\r\n                this.LabelPosition = () => {\r\n                    this.geoData.features.forEach(feature => {\r\n                    const center = this.geoPath.centroid(feature);\r\n                    const annotation = feature.properties.annotation;\r\n\r\n                    if (annotation && annotation != -1) {\r\n                        let textLines = [\r\n                            `Country: ${feature.properties.NAME}`,\r\n                            `City: ${annotation.city}`\r\n                        ];\r\n\r\n                        // 根据条件动态添加Summer和Winter的行\r\n                        if (annotation.summer_olympics && annotation.summer_olympics.length > 0) {\r\n                            textLines.push(`Summer: ${annotation.summer_olympics}`);\r\n                        }\r\n                        if (annotation.winter_olympics && annotation.winter_olympics.length > 0) {\r\n                            textLines.push(`Winter: ${annotation.winter_olympics}`);\r\n                        }\r\n                        const maxLineWidth = 30;\r\n\r\n                        // 用于跟踪当前垂直位置的变量\r\n                        let currentYOffset = 0;\r\n\r\n                        // 应用拆分函数并添加文本\r\n                        textLines.forEach((line) => {\r\n                            let subLines = this.splitTextToLines(line, maxLineWidth); // 使用拆分函数\r\n                            subLines.forEach((subLine) => {\r\n                                this.svg.append('text')\r\n                                    .attr('class', 'olympic-label')\r\n                                    .attr('x', center[0])\r\n                                    .attr('y', center[1] + currentYOffset) // 使用currentYOffset确定垂直位置\r\n                                    .attr('text-anchor', 'middle')\r\n                                    .attr('fill', 'black')\r\n                                    .style('font-size', '8px')\r\n                                    .text(subLine);\r\n\r\n                                // 每添加一行，更新currentYOffset以便下一行下移\r\n                                currentYOffset += 10; // 假设每行文本的高度加间距为15px\r\n                            });\r\n\r\n                            // 注意：这里不再需要调整index\r\n                        });\r\n                    }\r\n                    });\r\n                }\r\n\r\n                \r\n            }\r\n\r\n\r\n            else if (type === this.myType['Label Text']) {\r\n                this.labelPositionType = type;\r\n\r\n                this.LabelPosition = () => {\r\n                        // 仅为olympics_data.json中存在的国家显示国家名字\r\n                    this.geoData.features.forEach(feature => {\r\n                        if (feature.properties.annotation != -1) {\r\n                            const center = this.geoPath.centroid(feature);\r\n                            this.svg.append('text')\r\n                                .attr('class', 'country-label')\r\n                                .attr('x', center[0])\r\n                                .attr('y', center[1])\r\n                                .attr('text-anchor', 'middle')\r\n                                .attr('fill', 'black')\r\n                                .style('font-size', '15px')\r\n                                .text(feature.properties.NAME);\r\n                        }\r\n                    });\r\n\r\n                    // 过滤掉不需要展示注解的数据\r\n                    const annotatedFeatures = this.geoData.features.filter(feature => feature.properties.annotation && feature.properties.annotation != -1);\r\n\r\n                    // 用于注解的特征进行循环，而不是所有特征\r\n                    annotatedFeatures.forEach((feature, index) => {\r\n                        const annotation = feature.properties.annotation;\r\n\r\n\r\n\r\n                        // // 动态计算x坐标，考虑间距，以保证注解框在水平方向上均匀对齐\r\n                        // const x = col * (boxWidth + boxSpacing);\r\n\r\n                        // 计算每个注解的起始x坐标\r\n                        const totalAnnotationsWidth = annotatedFeatures.length * (boxWidth + boxSpacing) - boxSpacing; // 总宽度减去最后一个间距\r\n                        const startX = (this.mapWidth - totalAnnotationsWidth) / 2; // 为了居中对齐\r\n                        // // 调整y坐标，为每个注解框下方留出一定的间距\r\n                        // const y = this.mapHeight + row * (boxHeight + 20 + boxSpacing); // 调整了间距的计算\r\n                        const annotationX = startX + index * (boxWidth + boxSpacing);\r\n                        const annotationY = this.mapHeight + 50; // 地图下方50px\r\n\r\n\r\n                        // 绘制注解框\r\n                        this.svg.append('rect')\r\n                            .attr('class', 'annotation-box')\r\n                            .attr('x', annotationX)\r\n                            .attr('y', annotationY)\r\n                            .attr('width', boxWidth)\r\n                            .attr('height', boxHeight)\r\n                            .attr('fill', 'none')\r\n                            .attr('stroke', 'black');\r\n\r\n                        // 在注解框内添加文本\r\n                        let textLines = [\r\n                            `Country: ${feature.properties.NAME}`,\r\n                            `City: ${annotation.city}`\r\n                        ];\r\n\r\n                        // 根据条件动态添加Summer和Winter的行\r\n                        if (annotation.summer_olympics && annotation.summer_olympics.length > 0) {\r\n                            textLines.push(`Summer: ${annotation.summer_olympics}`);\r\n                        }\r\n                        if (annotation.winter_olympics && annotation.winter_olympics.length > 0) {\r\n                            textLines.push(`Winter: ${annotation.winter_olympics}`);\r\n                        }\r\n\r\n                        textLines.forEach((line, lineIndex) => {\r\n                            this.svg.append('text')\r\n                                .attr('class', 'annotation-text')\r\n                                .attr('x', annotationX + 5) // 略微缩进\r\n                                .attr('y', annotationY + 15 + (lineIndex * 12)) // 根据行数调整位置\r\n                                .attr('fill', 'black')\r\n                                .style('font-size', '10px')\r\n                                .text(line);\r\n                        });\r\n                    });\r\n                }\r\n                \r\n            }\r\n\r\n            else if (type === this.myType['Label Icon']) {\r\n                this.labelPositionType = type;\r\n\r\n                this.LabelPosition = () => {\r\n                        // 过滤掉不需要展示注解的数据\r\n                    const annotatedFeatures = this.geoData.features.filter(feature => feature.properties.annotation && feature.properties.annotation != -1);\r\n\r\n\r\n                    // 用于注解的特征进行循环\r\n                    annotatedFeatures.forEach((feature, index) => {\r\n                        const annotation = feature.properties.annotation;\r\n                        // 计算每个注解的起始x坐标\r\n                        const totalAnnotationsWidth = annotatedFeatures.length * (boxWidth + boxSpacing) - boxSpacing; // 总宽度减去最后一个间距\r\n                        const startX = (this.mapWidth - totalAnnotationsWidth) / 2; // 为了居中对齐\r\n                        // // 调整y坐标，为每个注解框下方留出一定的间距\r\n                        // const y = this.mapHeight + row * (boxHeight + 20 + boxSpacing); // 调整了间距的计算\r\n                        const annotationX = startX + index * (boxWidth + boxSpacing);\r\n                        const annotationY = this.mapHeight + 50; // 地图下方50px\r\n                        if (annotation && annotation.flag_base64) {\r\n                            const center = this.geoPath.centroid(feature);\r\n                            // 在地图的国家中心点上添加国旗图像\r\n                            this.svg.append('image')\r\n                                .attr('xlink:href', annotation.flag_base64)\r\n                                .attr('x', center[0] - 15) // 调整这个值以适合国旗图像的大小和位置\r\n                                .attr('y', center[1] - 10)\r\n                                .attr('width', 30) // 根据需要调整国旗的尺寸\r\n                                .attr('height', 20)\r\n                                .attr('class', 'country-flag');\r\n\r\n\r\n                            // 先绘制注解框作为背景\r\n                            this.svg.append('rect')\r\n                                .attr('class', 'annotation-box')\r\n                                .attr('x', annotationX)\r\n                                .attr('y', annotationY)\r\n                                .attr('width', boxWidth)\r\n                                .attr('height', boxHeight)\r\n                                .attr('fill', 'url(#flagPattern' + index + ')') // 使用图案填充\r\n                                .attr('stroke', 'black');\r\n\r\n                            let textLines = [\r\n                                `Country: ${feature.properties.NAME}`,\r\n                                `City: ${annotation.city}`\r\n                            ];\r\n\r\n                            // 根据条件动态添加Summer和Winter的行\r\n                            if (annotation.summer_olympics && annotation.summer_olympics.length > 0) {\r\n                                textLines.push(`Summer: ${annotation.summer_olympics}`);\r\n                            }\r\n                            if (annotation.winter_olympics && annotation.winter_olympics.length > 0) {\r\n                                textLines.push(`Winter: ${annotation.winter_olympics}`);\r\n                            }\r\n\r\n                            textLines.forEach((line, lineIndex) => {\r\n                                this.svg.append('text')\r\n                                    .attr('class', 'annotation-text')\r\n                                    .attr('x', annotationX + 5) // 略微缩进\r\n                                    .attr('y', annotationY + 15 + (lineIndex * 12)) // 根据行数调整位置\r\n                                    .attr('fill', 'black')\r\n                                    .style('font-size', '10px')\r\n                                    .text(line);\r\n                            });\r\n\r\n                            // 创建用于国旗背景的图案\r\n                            this.svg.append('pattern')\r\n                                .attr('id', 'flagPattern' + index)\r\n                                .attr('patternUnits', 'objectBoundingBox')\r\n                                .attr('width', '100%')\r\n                                .attr('height', '100%')\r\n                                .append('image')\r\n                                .attr('xlink:href', annotation.flag_base64)\r\n                                .attr('width', boxWidth)\r\n                                .attr('height', boxHeight)\r\n                                .attr('preserveAspectRatio', 'xMidYMid slice');\r\n                        }\r\n                    });\r\n                }\r\n                \r\n            }\r\n            else if (type === this.myType['Label Color']) {\r\n                this.labelPositionType = type;\r\n\r\n                this.LabelPosition = () => {\r\n                    // 颜色数组\r\n                    const countryColors = [\"#8ECFC9\", \"#FFBE7A\", \"#FA7F6F\", \"#82B0D2\", \"#BEB8DC\", \"#F6CAE5\", \"#F1D77E\", \"#2878b5\", \"#779043\"];\r\n                    const getCountryColor = (index) => countryColors[index % countryColors.length];\r\n\r\n                    // 过滤出需要注解的国家特征\r\n                    const annotatedFeatures = this.geoData.features.filter(feature => feature.properties.annotation && feature.properties.annotation != -1);\r\n\r\n                    // 为有注解的国家设置颜色\r\n                    annotatedFeatures.forEach((feature, index) => {\r\n                        // 计算每个注解的起始x坐标\r\n                        const totalAnnotationsWidth = annotatedFeatures.length * (boxWidth + boxSpacing) - boxSpacing; // 总宽度减去最后一个间距\r\n                        const startX = (this.mapWidth - totalAnnotationsWidth) / 2; // 为了居中对齐\r\n                        // // 调整y坐标，为每个注解框下方留出一定的间距\r\n                        // const y = this.mapHeight + row * (boxHeight + 20 + boxSpacing); // 调整了间距的计算\r\n                        const annotationX = startX + index * (boxWidth + boxSpacing);\r\n                        const annotationY = this.mapHeight + 50; // 地图下方50px\r\n                        const fillColor = getCountryColor(index); // 获取颜色\r\n\r\n                        // 设置国家颜色\r\n                        this.svg.selectAll('path')\r\n                            .filter(d => d === feature)\r\n                            .style('fill', fillColor)\r\n                            .classed(\"country-color\", true);\r\n\r\n                        // 创建注解框\r\n                        this.svg.append('rect')\r\n                            .attr('class', 'annotation-box')\r\n                            .attr('x', annotationX)\r\n                            .attr('y', annotationY)\r\n                            .attr('width', boxWidth)\r\n                            .attr('height', boxHeight)\r\n                            .attr('fill', fillColor) // 确保注解框颜色与国家颜色相同\r\n                            .attr('stroke', 'black');\r\n\r\n                        // 添加注解文本\r\n                        const annotation = feature.properties.annotation;\r\n                        let textLines = [\r\n                            `Country: ${feature.properties.NAME}`,\r\n                            `City: ${annotation.city}`\r\n                        ];\r\n\r\n                        // 根据条件动态添加Summer和Winter的行\r\n                        if (annotation.summer_olympics && annotation.summer_olympics.length > 0) {\r\n                            textLines.push(`Summer: ${annotation.summer_olympics}`);\r\n                        }\r\n                        if (annotation.winter_olympics && annotation.winter_olympics.length > 0) {\r\n                            textLines.push(`Winter: ${annotation.winter_olympics}`);\r\n                        }\r\n\r\n                        textLines.forEach((line, lineIndex) => {\r\n                            this.svg.append('text')\r\n                                .attr('class', 'annotation-text')\r\n                                .attr('x', annotationX + 5) // 略微缩进\r\n                                .attr('y', annotationY + 15 + (lineIndex * 12)) // 根据行数调整位置\r\n                                .attr('fill', 'black')\r\n                                .style('font-size', '10px')\r\n                                .text(line);\r\n                        });\r\n                    });\r\n                }\r\n                \r\n\r\n            }\r\n\r\n            else if (type === this.myType['Label Convenient']) {\r\n                this.labelPositionType = type;\r\n                this.LabelPosition = () => {\r\n                    const annotatedFeatures = this.geoData.features.filter(feature => feature.properties.annotation && feature.properties.annotation != -1);\r\n                    const totalAnnotations = annotatedFeatures.length;\r\n\r\n                    // 假设每边分配的注解数量大致相等\r\n                    const annotationsPerSide = Math.ceil(totalAnnotations / 3);\r\n                    // eslint-disable-next-line\r\n                    let leftAnnotationsCount = 0, bottomAnnotationsCount = 0, rightAnnotationsCount = 0;\r\n\r\n                    annotatedFeatures.forEach((feature) => {\r\n                        const countryCenter = this.geoPath.centroid(feature);\r\n                        const annotation = feature.properties.annotation;\r\n\r\n                        // 特定国家（如\"Austria\"）的连线长度\r\n                        const lineLength = feature.properties.NAME === \"Austria\" ? 400 : 300;\r\n\r\n                        // 计算到三边的距离\r\n                        const distanceToLeft = countryCenter[0];\r\n                        const distanceToBottom = this.mapHeight - countryCenter[1];\r\n                        const distanceToRight = this.mapWidth - countryCenter[0];\r\n\r\n                        // 确定注解应放置在哪个边缘\r\n                        let edge = 'left'; // 默认左边\r\n                        let minDistance = distanceToLeft;\r\n\r\n                        if (distanceToBottom < minDistance && bottomAnnotationsCount < annotationsPerSide) {\r\n                            minDistance = distanceToBottom;\r\n                            edge = 'bottom';\r\n                        }\r\n                        if (distanceToRight < minDistance && rightAnnotationsCount < annotationsPerSide) {\r\n                            edge = 'right';\r\n                        }\r\n\r\n                        // 更新对应边缘的注解计数\r\n                        if (edge === 'left') leftAnnotationsCount++;\r\n                        else if (edge === 'bottom') bottomAnnotationsCount++;\r\n                        else rightAnnotationsCount++;\r\n\r\n                        // 计算线的终点位置\r\n                        let lineEndX = countryCenter[0], lineEndY = countryCenter[1];\r\n                        let textOffsetX = countryCenter[0], textOffsetY = countryCenter[1];\r\n\r\n                        switch (edge) {\r\n                            case 'left':\r\n                                lineEndX -= lineLength;\r\n                                textOffsetX = lineEndX - boxWidth - 5;\r\n                                textOffsetY = countryCenter[1] - boxHeight / 2;\r\n                                break;\r\n                            case 'bottom':\r\n                                lineEndY += lineLength;\r\n                                textOffsetX = countryCenter[0] - boxWidth / 2;\r\n                                textOffsetY = lineEndY + 5;\r\n                                break;\r\n                            case 'right':\r\n                                lineEndX += lineLength;\r\n                                textOffsetX = lineEndX + 5;\r\n                                textOffsetY = countryCenter[1] - boxHeight / 2;\r\n                                break;\r\n                        }\r\n                        // 绘制注解连线\r\n                        this.svg.append('line')\r\n                            .attr('x1', countryCenter[0])\r\n                            .attr('y1', countryCenter[1])\r\n                            .attr('x2', lineEndX)\r\n                            .attr('y2', lineEndY)\r\n                            .attr('stroke', 'black')\r\n                            .attr('stroke-width', 1)\r\n                            .attr('class', 'annotation-line');\r\n\r\n                        // 绘制文本框背景\r\n                        this.svg.append('rect')\r\n                            .attr('x', textOffsetX)\r\n                            .attr('y', textOffsetY)\r\n                            .attr('width', boxWidth)\r\n                            .attr('height', boxHeight)\r\n                            .attr('fill', 'white')\r\n                            .attr('stroke', 'black')\r\n                            .attr('class', 'annotation-box');\r\n\r\n                        let textLines = [\r\n                            `Country: ${feature.properties.NAME}`,\r\n                            `City: ${annotation.city}`\r\n                        ];\r\n\r\n                        // 根据条件动态添加Summer和Winter的行\r\n                        if (annotation.summer_olympics && annotation.summer_olympics.length > 0) {\r\n                            textLines.push(`Summer: ${annotation.summer_olympics}`);\r\n                        }\r\n                        if (annotation.winter_olympics && annotation.winter_olympics.length > 0) {\r\n                            textLines.push(`Winter: ${annotation.winter_olympics}`);\r\n                        }\r\n\r\n                        // 添加多行注解文本\r\n                        textLines.forEach((line, i) => {\r\n                            this.svg.append('text')\r\n                                .attr('x', textOffsetX + 5)\r\n                                .attr('y', textOffsetY + 13 + i * 13)\r\n                                .attr('fill', 'black')\r\n                                .style('font-size', '10px')\r\n                                .text(line)\r\n                                .attr('class', 'annotation-text');\r\n                        });\r\n                    }); \r\n                }\r\n\r\n                \r\n            }\r\n\r\n            else if (type === this.myType['Label Aligned']) {\r\n                this.labelPositionType = type;\r\n\r\n                this.LabelPosition = () => {\r\n                    const sortedFeatures = this.geoData.features\r\n                        .filter(feature => feature.properties.annotation && feature.properties.annotation != -1)\r\n                        .sort((a, b) => {\r\n                            const centerA = this.geoPath.centroid(a);\r\n                            const centerB = this.geoPath.centroid(b);\r\n                            return centerA[0] - centerB[0];\r\n                        });\r\n\r\n                    // 计算每个注解的起始x坐标\r\n                    const totalAnnotationsWidth = sortedFeatures.length * (boxWidth + boxSpacing) - boxSpacing; // 总宽度减去最后一个间距\r\n                    const startX = (this.mapWidth - totalAnnotationsWidth) / 2; // 为了居中对齐\r\n\r\n                    sortedFeatures.forEach((feature, index) => {\r\n                        const annotation = feature.properties.annotation;\r\n                        const countryCenter = this.geoPath.centroid(feature);\r\n                        const annotationX = startX + index * (boxWidth + boxSpacing);\r\n                        const annotationY = this.mapHeight + 50; // 地图下方50px\r\n\r\n                        // 绘制注解框\r\n                        this.svg.append('rect')\r\n                            .attr('class', 'annotation-box')\r\n                            .attr('x', annotationX)\r\n                            .attr('y', annotationY)\r\n                            .attr('width', boxWidth)\r\n                            .attr('height', boxHeight)\r\n                            .attr('fill', 'none')\r\n                            .attr('stroke', 'black');\r\n\r\n                        // 准备注解文本\r\n                        let textLines = [\r\n                            `Country: ${feature.properties.NAME}`,\r\n                            `City: ${annotation.city}`\r\n                        ];\r\n\r\n                        // 根据条件动态添加Summer和Winter的行\r\n                        if (annotation.summer_olympics && annotation.summer_olympics.length > 0) {\r\n                            textLines.push(`Summer: ${annotation.summer_olympics}`);\r\n                        }\r\n                        if (annotation.winter_olympics && annotation.winter_olympics.length > 0) {\r\n                            textLines.push(`Winter: ${annotation.winter_olympics}`);\r\n                        }\r\n\r\n                        // 在注解框内添加文本\r\n                        textLines.forEach((line, lineIndex) => {\r\n                            this.svg.append('text')\r\n                                .attr('class', 'annotation-text')\r\n                                .attr('x', annotationX + 5) // 略微缩进\r\n                                .attr('y', annotationY + 15 + (lineIndex * 12)) // 调整文本的垂直位置\r\n                                .attr('fill', 'black')\r\n                                .style('font-size', '10px')\r\n                                .text(line);\r\n                        });\r\n\r\n                        // 绘制注解连线\r\n                        this.svg.append('path')\r\n                            .attr('d', `M${countryCenter[0]} ${countryCenter[1]} L${annotationX + boxWidth / 2} ${countryCenter[1]} L${annotationX + boxWidth / 2} ${annotationY}`)\r\n                            .attr('stroke', 'black')\r\n                            .attr('fill', 'none')\r\n                            .attr('class', 'annotation-line');\r\n                    });   \r\n                }\r\n                // 过滤并排序需要注解的国家特征，基于它们的中心x坐标\r\n                \r\n            }\r\n\r\n\r\n            else if (type === this.myType['Label Ordered']) {\r\n                this.labelPositionType = type;\r\n\r\n                this.LabelPosition = () => {\r\n                    const annotatedFeatures = this.geoData.features.filter(feature => feature.properties.annotation && feature.properties.annotation != -1);\r\n                    const circleCenterX = 500; // 圆心的x坐标\r\n                    const circleCenterY = this.mapHeight - 100; // 圆心的y坐标\r\n                    const radius = Math.min(this.mapWidth, this.mapHeight) / 4; // 半径\r\n                    const angleIncrement = (2 * Math.PI) / annotatedFeatures.length; // 每个注解之间的角度增量\r\n\r\n                    annotatedFeatures.forEach((feature, index) => {\r\n                        const angle = angleIncrement * index;\r\n                        const annotationX = circleCenterX + radius * Math.cos(angle);\r\n                        const annotationY = circleCenterY + radius * Math.sin(angle);\r\n                        const countryCenter = this.geoPath.centroid(feature);\r\n                        // 更改连线到注解的最近的边缘中心点\r\n                        const lineEndX = annotationX;\r\n                        const lineEndY = countryCenter[1] < annotationY ? annotationY - boxHeight / 2 : annotationY + boxHeight / 2;\r\n\r\n                        this.svg.append('path')\r\n                            .attr('d', `M${countryCenter[0]} ${countryCenter[1]} L${lineEndX} ${countryCenter[1]} L${lineEndX} ${lineEndY}`)\r\n                            .attr('stroke', 'black')\r\n                            .attr('fill', 'none')\r\n                            .attr('class', 'annotation-line');\r\n\r\n                        // 准备注解文本\r\n                        let textLines = [\r\n                            `Country: ${feature.properties.NAME}`,\r\n                            `City: ${feature.properties.annotation.city}`\r\n                        ];\r\n\r\n                        if (feature.properties.annotation.summer_olympics && feature.properties.annotation.summer_olympics.length > 0) {\r\n                            textLines.push(`Summer: ${feature.properties.annotation.summer_olympics}`);\r\n                        }\r\n                        if (feature.properties.annotation.winter_olympics && feature.properties.annotation.winter_olympics.length > 0) {\r\n                            textLines.push(`Winter: ${feature.properties.annotation.winter_olympics}`);\r\n                        }\r\n\r\n                        // 绘制注解框\r\n                        this.svg.append('rect')\r\n                            .attr('class', 'annotation-box')\r\n                            .attr('x', annotationX - boxWidth / 2) // 中心对齐调整\r\n                            .attr('y', annotationY - boxHeight / 2) // 中心对齐调整\r\n                            .attr('width', boxWidth)\r\n                            .attr('height', boxHeight)\r\n                            .attr('fill', 'none')\r\n                            .attr('stroke', 'black');\r\n\r\n                        // 在注解框内添加多行文本\r\n                        textLines.forEach((line, lineIndex) => {\r\n                            this.svg.append('text')\r\n                                .attr('class', 'annotation-text')\r\n                                .attr('x', annotationX)\r\n                                .attr('y', annotationY - boxHeight / 2 + 10 + lineIndex * 15) // 垂直位置调整\r\n                                .attr('text-anchor', 'middle')\r\n                                .attr('fill', 'black')\r\n                                .style('font-size', '10px')\r\n                                .text(line);\r\n                        });\r\n\r\n\r\n                    });\r\n                }\r\n                \r\n            }\r\n            else if (type === this.myType['Label Remove']) {\r\n                this.labelPositionType = type;\r\n                this.LabelPosition = () => {\r\n                    console.log(\"All Label Removed!\");\r\n                }\r\n            }\r\n            this.drawSvg();\r\n\r\n        },\r\n\r\n        setEncodingChannel(type) {\r\n            console.log(\"Encoding Channel:\", type);\r\n            //d3.select(\".\" + this.value + \"-legend\").selectAll(\"*\").remove();\r\n            if (this.isNumerical) {\r\n                //Encoding Color (Luminance)'\r\n                if (type === this.myType['Color (Luminance)']) {\r\n                    d3.select(\".\" + this.value + \"-legend\").selectAll(\"*\").remove();\r\n                    this.preColortype = type;\r\n                    this.encodingChannelType = type;\r\n                    const colorFunction = (scale) => {\r\n                        const transformFunction = (input) => Math.pow(input, 0.25);\r\n                        // const transformFunction = (input) => input\r\n\r\n                        const colorScale = d3.scaleSequential(d3.interpolateRgb(d3.rgb(220, 120, 130), d3.rgb(255, 255, 255)))\r\n                        .domain([transformFunction(this.mostPopulation), 0]);\r\n                        return scale == -1 ? this.defaultColor : colorScale(transformFunction(scale));\r\n                    }\r\n                    this.colorFunctionL = colorFunction;\r\n                    // 重写encodingChannel函数\r\n                    if (this.ifDoubleEncoding == false) {\r\n                        this.encodingChannel = () => {\r\n                            // 修改颜色映射的方法\r\n                            this.svg.selectAll('path')\r\n                                .attr('fill', d => colorFunction(this.getPopulation(d)));\r\n\r\n                            this.svg.selectAll('circle')\r\n                                .attr('fill', d => colorFunction(this.getPopulation(d)));\r\n                            this.highLights[this.pointer2highlight].forEach(highLight => {\r\n                                highLight();\r\n                            });\r\n                        } \r\n                        this.drawColorLuminanceLegend();\r\n                    } else {\r\n                        this.preEncoding = type;\r\n                        this.svg.selectAll('path')\r\n                        .attr('fill', `${this.defaultColor}`);\r\n                        this.svg.selectAll('circle')\r\n                        .attr('fill', `${this.defaultColor}`);\r\n                    }\r\n                }\r\n\r\n                //Encoding Color (Hue)'\r\n                else if (type === this.myType['Color (Hue)']) {\r\n                    d3.select(\".\" + this.value + \"-legend\").selectAll(\"*\").remove();\r\n                    this.preColortype = type;\r\n                    this.encodingChannelType = type;\r\n                    const colorFunction = (population) => {\r\n                        if (population < 0) {\r\n                            return this.defaultColor;\r\n                        }\r\n                        else if (population >= 0 && population < 5000000) {\r\n                            return 'rgb(142, 207, 201)'; // 人口数量小于5000000\r\n                        } else if (population >= 5000000 && population < 10000000) {\r\n                            return 'rgb(255, 190, 122)'; // 人口数量在5000000-10000000之间\r\n                        } else if (population >= 10000000 && population < 50000000) {\r\n                            return 'rgb(250, 127, 111)'; // 人口数量在10000000-50000000之间\r\n                        } else if (population >= 50000000 && population < 100000000) {\r\n                            return 'rgb(130, 176, 210)'; // 人口数量在50000000-100000000之间\r\n                        } else {\r\n                            return 'rgb(190, 184, 220)'; // 人口数量大于100000000\r\n                        }\r\n                    };\r\n                    // 重写encodingChannel函数\r\n                    if (this.ifDoubleEncoding == false) {\r\n                        this.encodingChannel = () => {\r\n                            // 修改颜色映射的方法\r\n                            this.svg.selectAll('path')\r\n                                .attr('fill', d => colorFunction(this.getPopulation(d)));\r\n\r\n                            this.svg.selectAll('circle')\r\n                                .attr('fill', d => colorFunction(this.getPopulation(d)));\r\n                            this.highLights[this.pointer2highlight].forEach(highLight => {\r\n                                highLight();\r\n                            });\r\n                        };\r\n                        this.drawColorHueLegend();\r\n                    } else {\r\n                        this.preEncoding = type;\r\n                        this.colorFunctionL = colorFunction;\r\n                        this.svg.selectAll('path')\r\n                        .attr('fill', this.defaultColor);\r\n                        this.svg.selectAll('circle')\r\n                        .attr('fill', this.defaultColor);\r\n                    }\r\n                }\r\n                //Encoding 3D Length\r\n                else if (type === this.myType['3D Length']) {\r\n                    d3.select(\".\" + this.value + \"-legend\").selectAll(\"*\").remove();\r\n                    this.encodingChannelType = type;\r\n\r\n                    this.encodingChannel = () => {\r\n                        this.svg.selectAll('path').attr(\"fill\", this.defaultColor);\r\n\r\n                        // 在地图上绘制模拟的3D长方体\r\n                        const baseHeight = 3; // 长方体基础高度，所有长方体至少有这个高度\r\n                        const populationPerHeight = 800000; // 每增加这么多人口，长方体的高度增加一单位\r\n                        const cuboidWidth = 20; // 长方体的宽度\r\n                        const cuboidLength = 30; // 长方体的长度（在SVG中模拟的“深度”）\r\n                        const sideOpacity = 0.5; // 侧面的不透明度\r\n\r\n                        this.geoData.features.forEach(feature => {\r\n                            const center = this.geoPath.centroid(feature);\r\n                            const population = this.getPopulation(feature);\r\n                            if (population >= 1000000) { // 人口大于等于1000000时绘制长方体\r\n                                const height = baseHeight + (population / populationPerHeight); // 长方体的总高度\r\n\r\n                                if (this.ifDoubleEncoding == false) {\r\n                                    // 绘制长方体的“前面”\r\n                                    this.svg.append('rect')\r\n                                        .attr('x', center[0] - cuboidWidth / 2)\r\n                                        .attr('y', center[1] - height)\r\n                                        .attr('width', cuboidWidth)\r\n                                        .attr('height', height)\r\n                                        .attr('fill', 'rgba(230, 158, 165, 0.8)'); // 修改前面的颜色\r\n\r\n                                    // 绘制长方体的“顶面”\r\n                                    this.svg.append('polygon')\r\n                                        .attr('points', `${center[0] - cuboidWidth / 2},${center[1] - height} ${center[0] + cuboidWidth / 2},${center[1] - height} ${center[0] + cuboidWidth / 2 - cuboidLength / 4},${center[1] - height - cuboidLength / 4} ${center[0] - cuboidWidth / 2 - cuboidLength / 4},${center[1] - height - cuboidLength / 4}`)\r\n                                        .attr('fill', 'rgba(230, 158, 165, 0.6)');\r\n\r\n                                    // 绘制长方体的“左侧面”\r\n                                    this.svg.append('polygon')\r\n                                        .attr('points', `${center[0] - cuboidWidth / 2},${center[1]} ${center[0] - cuboidWidth / 2},${center[1] - height} ${center[0] - cuboidWidth / 2 - cuboidLength / 4},${center[1] - height - cuboidLength / 4} ${center[0] - cuboidWidth / 2 - cuboidLength / 4},${center[1] - cuboidLength / 4}`)\r\n                                        .attr('fill', `rgba(200, 60, 60, ${sideOpacity})`); // 修改左侧面的颜色\r\n                                } else {\r\n                                    // 绘制长方体的“前面”                     \r\n                                    this.svg.append('rect')\r\n                                        .attr('x', center[0] - cuboidWidth / 2)\r\n                                        .attr('y', center[1] - height)\r\n                                        .attr('width', cuboidWidth)\r\n                                        .attr('height', height)\r\n                                        .attr('fill', this.colorFunctionL(population))\r\n                                        .attr('opacity', '0.8'); // 修改前面的颜色\r\n\r\n                                    // 绘制长方体的“顶面”\r\n                                    this.svg.append('polygon')\r\n                                        .attr('points', `${center[0] - cuboidWidth / 2},${center[1] - height} ${center[0] + cuboidWidth / 2},${center[1] - height} ${center[0] + cuboidWidth / 2 - cuboidLength / 4},${center[1] - height - cuboidLength / 4} ${center[0] - cuboidWidth / 2 - cuboidLength / 4},${center[1] - height - cuboidLength / 4}`)\r\n                                        .attr('fill', this.colorFunctionL(population))\r\n                                        .attr('opacity', '0.6');\r\n\r\n                                    // 绘制长方体的“左侧面”\r\n                                    this.svg.append('polygon')\r\n                                        .attr('points', `${center[0] - cuboidWidth / 2},${center[1]} ${center[0] - cuboidWidth / 2},${center[1] - height} ${center[0] - cuboidWidth / 2 - cuboidLength / 4},${center[1] - height - cuboidLength / 4} ${center[0] - cuboidWidth / 2 - cuboidLength / 4},${center[1] - cuboidLength / 4}`)\r\n                                        .attr('fill', this.colorFunctionL(population))\r\n                                        .attr('opacity', '0.9'); // 修改左侧面的颜色\r\n                                }\r\n                            }\r\n                        }); \r\n                        if (this.ifDoubleEncoding == false) {\r\n                            //draw legend\r\n                            for (let i = 0, delta = 20, px = 50; i < 4; i++) {\r\n                                let t = 1000000*Math.pow(5, i), x = px;\r\n                                let v = t / 800000;\r\n                                let y = 330-v;\r\n                                this.svg.append('rect')\r\n                                    .attr('x', px)\r\n                                    .attr('y', 330-v)\r\n                                    .attr('width', 20)\r\n                                    .attr('height', v)\r\n                                    .attr('fill', 'rgba(230, 158, 165, 0.8)');\r\n                                this.svg.append('polygon')\r\n                                    .attr('points', `${x},${y} ${x-8},${y-8} ${x-8},${y+v-8} ${x},${y+v}`)\r\n                                    .attr('fill', 'rgba(200, 60, 60, 0.5)');\r\n                                this.svg.append('polygon')\r\n                                    .attr('points', `${x},${y} ${x-8},${y-8} ${x+12},${y-8} ${x+20},${y}`)\r\n                                    .attr('fill', 'rgba(230, 158, 165, 0.6)');\r\n\r\n                                const label = t < 1000 ? Math.floor(t) :\r\n                                    t < 1000000 ? Math.floor(t / 1000) + \"k\" :\r\n                                    Math.floor(t / 1000000) + \"m\";\r\n                                this.svg.append('text')\r\n                                    .attr('x', px-5)\r\n                                    .attr('y', 315-v)\r\n                                    .text(label);\r\n                                px += 2 * delta;\r\n                            }\r\n                        } else {\r\n                            //draw legend\r\n                            for (let i = 0, delta = 20, px = 50; i < 4; i++) {\r\n                                let t = 1000000*Math.pow(5, i), x = px;\r\n                                let v = t / 800000;\r\n                                let y = 330-v;\r\n                                this.svg.append('rect')\r\n                                    .attr('x', px)\r\n                                    .attr('y', 330-v)\r\n                                    .attr('width', 20)\r\n                                    .attr('height', v)\r\n                                    .attr('fill', this.colorFunctionL(t))\r\n                                    .attr('opacity', '0.8');\r\n                                this.svg.append('polygon')\r\n                                    .attr('points', `${x},${y} ${x-8},${y-8} ${x-8},${y+v-8} ${x},${y+v}`)\r\n                                    .attr('fill', this.colorFunctionL(t))\r\n                                    .attr('opacity', '0.9');\r\n                                this.svg.append('polygon')\r\n                                    .attr('points', `${x},${y} ${x-8},${y-8} ${x+12},${y-8} ${x+20},${y}`)\r\n                                    .attr('fill', this.colorFunctionL(t))\r\n                                    .attr('opacity', '0.6');\r\n\r\n                                const label = t < 1000 ? Math.floor(t) :\r\n                                    t < 1000000 ? Math.floor(t / 1000) + \"k\" :\r\n                                    Math.floor(t / 1000000) + \"m\";\r\n                                this.svg.append('text')\r\n                                    .attr('x', px-5)\r\n                                    .attr('y', 315-v)\r\n                                    .text(label);\r\n                                px += 2 * delta;\r\n                            }\r\n                        }                      \r\n                    }\r\n                }\r\n\r\n                else if (type === this.myType['2D Length']) {\r\n                    d3.select(\".\" + this.value + \"-legend\").selectAll(\"*\").remove();\r\n                    this.encodingChannelType = type;\r\n\r\n                    this.encodingChannel = () => {\r\n                        this.svg.selectAll('path').attr(\"fill\", this.defaultColor);\r\n\r\n                        // draw bar chart\r\n                        const baseHeight = 3; // 长方体基础高度，所有长方体至少有这个高度\r\n                        const populationPerHeight = 800000; // 每增加这么多人口，长方体的高度增加一单位\r\n                        const cuboidWidth = 20; // 长方体的宽度\r\n\r\n                        this.geoData.features.forEach(feature => {\r\n                            const center = this.geoPath.centroid(feature);\r\n                            const population = this.getPopulation(feature);\r\n                            if (population >= 1000000) { // 人口大于等于1000000时绘制长方体\r\n                                const height = baseHeight + (population / populationPerHeight); // 长方体的总高度\r\n\r\n                                if (this.ifDoubleEncoding == false) {\r\n                                    this.svg.append('rect')\r\n                                    .attr('x', center[0] - cuboidWidth / 2)\r\n                                    .attr('y', center[1] - height)\r\n                                    .attr('width', cuboidWidth)\r\n                                    .attr('height', height)\r\n                                    .attr('fill', 'rgba(230, 158, 165, 0.7)');\r\n                                } else {\r\n                                    this.svg.append('rect')\r\n                                    .attr('x', center[0] - cuboidWidth / 2)\r\n                                    .attr('y', center[1] - height)\r\n                                    .attr('width', cuboidWidth)\r\n                                    .attr('height', height)\r\n                                    .attr('fill', this.colorFunctionL(population))\r\n                                    .attr('opacity', '0.7');\r\n                                }\r\n                            }\r\n                        });\r\n                        if (this.ifDoubleEncoding == false) {\r\n                            //draw legend\r\n                            for (let i = 0, delta = 20, px = 50; i < 4; i++) {\r\n                                let t = 1000000*Math.pow(5, i);\r\n                                let v = t / 800000;\r\n                                this.svg.append('rect')\r\n                                    .attr('x', px)\r\n                                    .attr('y', 330-v)\r\n                                    .attr('width', 20)\r\n                                    .attr('height', v)\r\n                                    .attr('fill', 'rgba(230, 158, 165, 0.7)');\r\n                                    const label = t < 1000 ? Math.floor(t) :\r\n                                    t < 1000000 ? Math.floor(t / 1000) + \"k\" :\r\n                                    Math.floor(t / 1000000) + \"m\";\r\n                                    this.svg.append('text')\r\n                                    .attr('x', px)\r\n                                    .attr('y', 320-v)\r\n                                    .text(label);\r\n                                px += 2 * delta;\r\n                            }\r\n                        } else {\r\n                            for (let i = 0, delta = 20, px = 50; i < 4; i++) {\r\n                                let t = 1000000*Math.pow(5, i);\r\n                                let v = t / 800000;\r\n                                this.svg.append('rect')\r\n                                    .attr('x', px)\r\n                                    .attr('y', 330-v)\r\n                                    .attr('width', 20)\r\n                                    .attr('height', v)\r\n                                    .attr('fill', this.colorFunctionL(t))\r\n                                    .attr('opacity', '0.7');\r\n                                    const label = t < 1000 ? Math.floor(t) :\r\n                                    t < 1000000 ? Math.floor(t / 1000) + \"k\" :\r\n                                    Math.floor(t / 1000000) + \"m\";\r\n                                    this.svg.append('text')\r\n                                    .attr('x', px)\r\n                                    .attr('y', 320-v)\r\n                                    .text(label);\r\n                                px += 2 * delta;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n                // Encoding Size\r\n                else if (type === this.myType['Size']) {\r\n                    d3.select(\".\" + this.value + \"-legend\").selectAll(\"*\").remove();\r\n                    this.encodingChannelType = type;\r\n\r\n                    this.encodingChannel = () => {\r\n                        this.svg.selectAll('path').attr(\"fill\", this.defaultColor);\r\n\r\n                        // 在地图上绘制人口方块\r\n                        // this.drawPopulationSquares();\r\n                        const populationExtent = d3.extent(this.geoData.features, d => this.getPopulation(d));\r\n                        const sizeScale = d3.scaleSqrt()\r\n                            .domain(populationExtent)\r\n                            .range([5, 50]); // 方块大小的范围\r\n\r\n                        // 直接在现有的SVG上绘制方块，不清除之前的内容\r\n                        this.geoData.features.forEach(feature => {\r\n                            const [x, y] = this.geoPath.centroid(feature);\r\n                            const population = this.getPopulation(feature);\r\n                            if (population >= 1000000) { // 人口大于等于1000000时绘制方块\r\n                                if (this.ifDoubleEncoding == false) {\r\n                                    this.svg.append('rect')\r\n                                    .attr('x', x - sizeScale(population) / 2)\r\n                                    .attr('y', y - sizeScale(population) / 2)\r\n                                    .attr('width', sizeScale(population))\r\n                                    .attr('height', sizeScale(population))\r\n                                    .attr('fill', 'rgba(230, 158, 165, 0.7)');\r\n                                } else {\r\n                                    this.svg.append('rect')\r\n                                    .attr('x', x - sizeScale(population) / 2)\r\n                                    .attr('y', y - sizeScale(population) / 2)\r\n                                    .attr('width', sizeScale(population))\r\n                                    .attr('height', sizeScale(population))\r\n                                    .attr('fill', this.colorFunctionL(population))\r\n                                    .attr('opacity', '0.7');\r\n                                }\r\n                                \r\n                            }\r\n                        });\r\n                        if (this.ifDoubleEncoding == false) {\r\n                            //draw size legend\r\n                            for (let i = 0, delta = 20, py = 100; i < 4; i++) {\r\n                                let t = 1000000*Math.pow(5, i)\r\n                                let v = sizeScale(t);\r\n                                this.svg.append('rect')\r\n                                    .attr('x', 50)\r\n                                    .attr('y', py)\r\n                                    .attr('width', v)\r\n                                    .attr('height', v)\r\n                                    .attr('fill', 'rgba(230, 158, 165, 0.7)');\r\n\r\n                                const label = t < 1000 ? Math.floor(t) :\r\n                                    t < 1000000 ? Math.floor(t / 1000) + \"k\" :\r\n                                    Math.floor(t / 1000000) + \"m\";\r\n                                this.svg.append('text')\r\n                                    .attr('x', 65+v)\r\n                                    .attr('y', py + v)\r\n                                    .text(label);\r\n\r\n                                py += v + delta;\r\n                            }\r\n                        } else {\r\n                            for (let i = 0, delta = 20, py = 100; i < 4; i++) {\r\n                                let t = 1000000*Math.pow(5, i)\r\n                                let v = sizeScale(t);\r\n                                this.svg.append('rect')\r\n                                    .attr('x', 50)\r\n                                    .attr('y', py)\r\n                                    .attr('width', v)\r\n                                    .attr('height', v)\r\n                                    .attr('fill', this.colorFunctionL(t))\r\n                                    .attr('opacity', '0.7');\r\n\r\n                                const label = t < 1000 ? Math.floor(t) :\r\n                                    t < 1000000 ? Math.floor(t / 1000) + \"k\" :\r\n                                    Math.floor(t / 1000000) + \"m\";\r\n                                this.svg.append('text')\r\n                                    .attr('x', 65+v)\r\n                                    .attr('y', py + v)\r\n                                    .text(label);\r\n\r\n                                py += v + delta;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                //Encoding Quantity\r\n                else if (type === this.myType['Quantity']) {\r\n                    this.encodingChannelType = type;\r\n\r\n                    this.encodingChannel = () => {\r\n                        this.svg.selectAll('path').attr(\"fill\", this.defaultColor);\r\n\r\n                        // 在地图上叠加人口图标\r\n                        const iconWidth = 10; // 图标的宽度\r\n                        const iconHeight = 25; // 图标的高度\r\n                        const iconGap = 3; // 调整图标间的间隔\r\n                        const scaleX = 0.4;\r\n                        const scaleY = 0.4;\r\n\r\n                        // 直接在现有的SVG上绘制图标，不清除之前的内容\r\n                        this.geoData.features.forEach(feature => {\r\n                            const center = this.geoPath.centroid(feature);\r\n                            const population = this.getPopulation(feature);\r\n\r\n                            // 只有当人口大于等于1000000时才绘制图标\r\n                            if (population >= 1000000) {\r\n                                const totalIcons = Math.ceil(population / 8000000); // 总图标数\r\n\r\n                                for (let i = 0; i < totalIcons; i++) {\r\n                                    // 计算图标的位置\r\n                                    // 将图标排列成一行显示5个图标的形式\r\n                                    const x = center[0] - ((iconWidth + iconGap) * 5 / 2) + ((i % 5) * (iconWidth + iconGap));\r\n                                    const y = center[1] + (Math.floor(i / 5) * (iconHeight + iconGap)) - 10;\r\n                                    const x1 = x + 6.5;\r\n                                    const y1 = y - 3.5;\r\n                                    // 添加图标\r\n                                    if (this.ifDoubleEncoding == false) {\r\n                                        // this.svg.append('image')\r\n                                        // .attr('xlink:href', require('../assets/PersonIcon.svg')) // 图标的路径\r\n                                        // .attr('x', x)\r\n                                        // .attr('y', y)\r\n                                        // .attr('width', iconWidth)\r\n                                        // .attr('height', iconHeight)\r\n                                        // .attr('opcacity', 0.7);\r\n                                        var g = this.svg.append('g');\r\n                                        g.append('path')\r\n                                            .attr('d', \"M1 14.0338C1 10.5338 1 7.5338 4.5 4.0338C7.3 1.2338 12 0.867135 14 1.0338L19.5 1.03381C21.5 1.03381 26.2 1.6338 29 4.0338C31.8 6.4338 32.1667 11.7005 32 14.0338V24.0338C32 26.8338 28.3333 28.8671 26.5 29.5338L24.5 42.0338C24.5 43.2338 23.1667 44.2005 22.5 44.5338H10.5C9.7 44.5338 9.16667 42.8671 9 42.0338L7 29.5338C4.2 29.9338 2.16667 26.0338 1.5 24.0338C1.33333 21.8671 1 16.8338 1 14.0338Z\")\r\n                                            .attr('transform', 'scale(' + scaleX + ',' + scaleY + ')')\r\n                                            .attr('fill', 'rgba(230, 158, 165, 0.7)')\r\n                                            .attr('stroke', 'none')\r\n                                            .attr('stroke-width', 3);\r\n                                        this.svg.append('circle')\r\n                                            .attr('cx', x1)\r\n                                            .attr('cy', y1)\r\n                                            .attr('r', 4)\r\n                                            .style('stroke', 'none')\r\n                                            .style('fill', 'rgba(230, 158, 165, 0.7)');\r\n                                        g.attr('transform', 'translate('+x+','+y+')')\r\n                                            .attr('transform', 'scale(' + scaleX + ',' + scaleY + ')')\r\n                                            .attr('fill', 'rgba(230, 158, 165, 0.7)')\r\n                                            .attr('stroke', 'none')\r\n                                            .attr('stroke-width', 3);\r\n                                        g.attr('transform', 'translate(' + x + ',' + y + ')');\r\n                                    } else {\r\n                                        // var gg = this.svg.append('g');\r\n                                        // gg.append('path')\r\n                                        //     .attr('d', 'M14.8025 62.0243H13.3025V63.5243V109.33C13.3025 112.457 10.7652 114.995 7.62974 114.995C4.52341 114.995 2.05603 112.482 2.05603 109.33V58.5276C2.05603 47.7847 10.8631 39.0498 21.6399 39.0498H57.8253C68.5917 39.0498 77.4056 47.7849 77.4056 58.5276V109.33C77.4056 112.483 74.9364 114.995 71.8267 114.995C68.6982 114.995 66.1557 112.454 66.1557 109.33V63.5243V62.0243H64.6557H60.9589H59.4589V63.5243V190.975C59.4589 195.441 55.8001 199.086 51.3147 199.086C46.8293 199.086 43.2017 195.448 43.2017 190.975V116.968V115.468H41.7017H37.7564H36.2564V116.968V190.975C36.2564 195.449 32.6278 199.086 28.1539 199.086C23.6745 199.086 20.0392 195.447 20.0392 190.975C20.0392 187.046 20.0184 155.183 19.9975 124.302C19.9871 108.862 19.9767 93.6674 19.9689 82.3327L19.9594 68.6775L19.9568 64.8683L19.9561 63.8666L19.9559 63.61L19.9558 63.5451V63.5288V63.5247C19.9558 63.5238 19.9558 63.5233 18.4558 63.5243L19.9558 63.5233L19.9548 62.0243H18.4558H14.8025ZM39.7326 31.8474C31.5119 31.8474 24.8553 25.1836 24.8535 16.9684C24.8537 8.74658 31.5101 2.08571 39.7326 2.08571C47.945 2.08571 54.6081 8.74501 54.6081 16.9684C54.6081 25.1831 47.945 31.8474 39.7326 31.8474Z')\r\n                                        //     .attr('transform', 'scale(' + scaleX + ',' + scaleY + ')')\r\n                                        //     .attr('fill', this.colorFunctionL(population))\r\n                                        //     .attr('stroke', 'black')\r\n                                        //     .attr('stroke-width', 3);\r\n                                        // gg.attr('transform', 'translate(' + x + ',' + y + ')');\r\n                                        var gd = this.svg.append('g');\r\n                                        gd.append('path')\r\n                                            .attr('d', \"M1 14.0338C1 10.5338 1 7.5338 4.5 4.0338C7.3 1.2338 12 0.867135 14 1.0338L19.5 1.03381C21.5 1.03381 26.2 1.6338 29 4.0338C31.8 6.4338 32.1667 11.7005 32 14.0338V24.0338C32 26.8338 28.3333 28.8671 26.5 29.5338L24.5 42.0338C24.5 43.2338 23.1667 44.2005 22.5 44.5338H10.5C9.7 44.5338 9.16667 42.8671 9 42.0338L7 29.5338C4.2 29.9338 2.16667 26.0338 1.5 24.0338C1.33333 21.8671 1 16.8338 1 14.0338Z\")\r\n                                            .attr('transform', 'scale(' + scaleX + ',' + scaleY + ')')\r\n                                            .attr('fill', this.colorFunctionL(population))\r\n                                            .attr('stroke', 'none')\r\n                                            .attr('stroke-width', 3);\r\n                                        this.svg.append('circle')\r\n                                            .attr('cx', x1)\r\n                                            .attr('cy', y1)\r\n                                            .attr('r', 3)\r\n                                            .style('stroke', 'none')\r\n                                            .style('fill', this.colorFunctionL(population));\r\n                                        gd.attr('transform', 'translate('+x+','+y+')')\r\n                                            .attr('transform', 'scale(' + scaleX + ',' + scaleY + ')')\r\n                                            .attr('fill', this.colorFunctionL(population))\r\n                                            .attr('stroke', 'none')\r\n                                            .attr('stroke-width', 3);\r\n                                        gd.attr('transform', 'translate(' + x + ',' + y + ')');\r\n                                    }\r\n                                }\r\n                            }\r\n                        });\r\n                        //draw quantity legend\r\n                        this.svg.append('image')\r\n                            .attr('xlink:href', require('../assets/PersonIcon.svg')) // 图标的路径\r\n                            .attr('x', 50)\r\n                            .attr('y', 100)\r\n                            .attr('width', iconWidth*2)\r\n                            .attr('height', iconHeight*2);\r\n                        this.svg.append('text')\r\n                            .attr('x', 70)\r\n                            .attr('y', 120)\r\n                            .text(':100k');\r\n                        if (this.preColortype == 0) {\r\n                            //luminance legend\r\n                            this.drawColorLuminanceLegend();\r\n                        } else if (this.preColortype == 1) {\r\n                            //hue legend\r\n                            this.drawColorHueLegend();\r\n                        }\r\n                    }\r\n\r\n                    \r\n                }\r\n                else if (type === this.myType['Remove']) {\r\n                    this.encodingChannelType = type;\r\n\r\n                    this.encodingChannel = () => {\r\n                        this.svg.selectAll('path').attr(\"fill\", this.defaultColor);\r\n                        d3.select(\".\" + this.value + \"-legend\").selectAll(\"*\").remove();\r\n                    }\r\n                }\r\n\r\n                else {\r\n                    // // 如果没有适用的编码方式\r\n                    // this.encodingChannelType = -1; // 或其他表示无效编码方式的值\r\n\r\n                    // // 显示一条消息\r\n                    // this.encodingChannel = () => {\r\n                    //     this.svg.selectAll('path').attr(\"fill\", this.defaultColor);\r\n\r\n                    //     // 首先，清除可能存在的旧消息\r\n                    //     d3.select(\".\" + this.value + \"-legend\").selectAll(\"*\").remove();\r\n\r\n                    //     // 向legend SVG元素中添加文本\r\n                    //     d3.select(\".\" + this.value + \"-legend\")\r\n                    //         .append('text')\r\n                    //         .attr('x', 10) // 根据需要调整文本的x位置\r\n                    //         .attr('y', 20) // 根据需要调整文本的y位置\r\n                    //         .attr('fill', 'black') // 文本颜色\r\n                    //         .style('font-size', '14px') // 文本大小\r\n                    //         .text('This encoding method is not applicable to the current data provided.');\r\n                    // };\r\n                    // d3.select(\".\" + this.value + \"-legend\").selectAll(\"*\").remove();\r\n                    this.showErrorDialog(\"Encoding Channel Not Support\", \"The selected encoding channel only support the data your uploaded!\")\r\n                }\r\n            }\r\n            else {\r\n                d3.select(\".\" + this.value + \"-legend\").selectAll(\"*\").remove();\r\n                if (type === this.myType['Glyph']) {\r\n                    this.encodingChannelType = type;\r\n                    this.encodingChannel = () => {\r\n                        this.svg.selectAll('path').attr(\"fill\", this.defaultColor);\r\n\r\n                        this.geoData.features.forEach(feature => {\r\n                            const flagBase64 = this.getPopulation(feature); // 使用getPopulation方法尝试从infoData获取国旗的base64编码\r\n\r\n                            // 检查flagBase64是否不等于-1，仅当不等于-1时，才显示国旗\r\n                            if (flagBase64 !== -1) {\r\n                                const center = this.geoPath.centroid(feature); // 计算国家地理中心点\r\n\r\n                                // 在地图的国家中心点上添加国旗图像\r\n                                if (this.ifDoubleEncoding == false) {\r\n                                    this.svg.append('image')\r\n                                    .attr('xlink:href', flagBase64) // 使用国旗的base64编码\r\n                                    .attr('x', center[0] - 10) // 你可能需要调整这个以适合国旗图像的大小和位置\r\n                                    .attr('y', center[1] - 10) // 同上\r\n                                    .attr('width', 20) // 根据需要调整国旗的尺寸\r\n                                    .attr('height', 20);\r\n                                } else {\r\n                                    this.svg.append('image')\r\n                                    .attr('xlink:href', flagBase64) // 使用国旗的base64编码\r\n                                    .attr('x', center[0] - 10) // 你可能需要调整这个以适合国旗图像的大小和位置\r\n                                    .attr('y', center[1] - 10) // 同上\r\n                                    .attr('width', 20) // 根据需要调整国旗的尺寸\r\n                                    .attr('height', 20)\r\n                                    .attr('fill', this.colorFunctionL());\r\n                                }\r\n                                \r\n                            }\r\n                        });\r\n                    };\r\n                }\r\n                else if (type === this.myType['Color (Hue)']) {\r\n                    this.encodingChannelType = type;\r\n\r\n                    // 1. 创建一个包含所有国家名称的数组\r\n                    const countries = this.geoData.features.map(d => d.properties.NAME);\r\n\r\n                    // 2. 自定义一个包含51种颜色的数组\r\n                    const customColors = [\r\n                        \"#e6194B\", \"#3cb44b\", \"#ffe119\", \"#4363d8\", \"#f58231\", \"#911eb4\", \"#46f0f0\", \"#f032e6\",\r\n                        \"#bcf60c\", \"#fabebe\", \"#008080\", \"#e6beff\", \"#9a6324\", \"#fffac8\", \"#800000\", \"#aaffc3\",\r\n                        \"#808000\", \"#ffd8b1\", \"#000075\", \"#808080\", \"#123123\", \"#000000\",\r\n                        // 添加更多颜色以确保有51种不同的颜色\r\n                        \"#59656d\", \"#c17b81\", \"#b5d99c\", \"#f5b971\", \"#8fb5aa\", \"#f28a9b\", \"#a4c3ed\", \"#8ec6c5\",\r\n                        \"#c6d7eb\", \"#ead3c1\", \"#92b4a7\", \"#f4ebc1\", \"#cbb3bf\", \"#acb7ae\", \"#e2c2de\", \"#cccccc\",\r\n                        \"#b97a57\", \"#ab69c6\", \"#966fd6\", \"#cfcfc4\", \"#b39eb5\", \"#779ecb\", \"#fdfd96\", \"#836953\",\r\n                        \"#779ecb\", \"#03c03c\", \"#966fd6\", \"#c23b22\", \"#f49ac2\", \"#fadadd\"\r\n                    ];\r\n\r\n                    // 使用d3.scaleOrdinal来映射国家到颜色\r\n                    const colorScale = (d) => {\r\n                        if (d && d.properties && d.properties.NAME)\r\n                            return d3.scaleOrdinal(countries, customColors)(d.properties.NAME);\r\n                        else\r\n                            return this.defaultColor;\r\n                    }\r\n\r\n                    // 重写encodingChannel函数\r\n                    this.encodingChannel = () => {\r\n                        // 在地图上为每个国家应用颜色\r\n                        this.svg.selectAll('path')\r\n                            .attr('fill', d => colorScale(d)) // 使用比例尺确定颜色\r\n                            .attr('stroke', '#ffffff'); // 设置边框颜色，可根据需要调整\r\n\r\n                        this.svg.selectAll('circle')\r\n                            .attr('fill', d => colorScale(d))\r\n                            .attr('stroke', '#ffffff');\r\n                        this.highLights[this.pointer2highlight].forEach(highLight => {\r\n                                highLight();\r\n                            });\r\n                    };\r\n                }\r\n                else {\r\n                    // // 如果没有适用的编码方式\r\n                    // this.encodingChannelType = -1; // 或其他表示无效编码方式的值\r\n\r\n                    // // 显示一条消息\r\n                    // this.encodingChannel = () => {\r\n                    //     this.svg.selectAll('path').attr(\"fill\", this.defaultColor);\r\n\r\n                    //     // 首先，清除可能存在的旧消息\r\n                    //     d3.select(\".\" + this.value + \"-legend\").selectAll(\"*\").remove();\r\n\r\n                    //     // 向legend SVG元素中添加文本\r\n                    //     d3.select(\".\" + this.value + \"-legend\")\r\n                    //         .append('text')\r\n                    //         .attr('x', 10) // 根据需要调整文本的x位置\r\n                    //         .attr('y', 20) // 根据需要调整文本的y位置\r\n                    //         .attr('fill', 'black') // 文本颜色\r\n                    //         .style('font-size', '14px') // 文本大小\r\n                    //         .text('This encoding method is not applicable to the current data provided.');\r\n                    // };\r\n\r\n                    this.showErrorDialog(\"Encoding Channel Not Support\", \"The selected encoding channel only support the data your uploaded!\")\r\n                }\r\n\r\n\r\n            }\r\n\r\n\r\n            this.drawSvg();\r\n        },\r\n\r\n        drawColorLuminanceLegend() {\r\n            const legendWidth = this.legendWidth;\r\n            const legendHeight = 20;\r\n            const numSegments = 8; // 将色彩标尺等分成5段\r\n\r\n            const segmentWidth = legendWidth / numSegments; // 每个段的宽度\r\n            const populationWidth = Math.pow(this.mostPopulation, 0.25) / numSegments\r\n\r\n            const legendGradient = this.legend.append('svg')\r\n                .attr('width', legendWidth)\r\n                .attr('height', legendHeight);\r\n\r\n            this.legend.append('text')\r\n                .attr('x', 0)\r\n                .attr('y', legendHeight + 15)\r\n                // .attr('text-anchor', 'middle')\r\n                .text('0')\r\n                .style('font-size', '10px');\r\n\r\n            // 绘制每个段的渐变色块和白色分隔线\r\n            for (let i = 0; i < numSegments; i++) {\r\n                const segmentStart = i * segmentWidth;\r\n                const segmentEnd = (i + 1) * segmentWidth;\r\n\r\n                const populationStart = Math.pow(i * populationWidth, 4);\r\n                const populationEnd = Math.pow((i + 1) * populationWidth, 4);\r\n\r\n                // 添加渐变色块\r\n                const gradient = legendGradient.append('defs')\r\n                    .append('linearGradient')\r\n                    .attr('id', `legendGradient${i}`)\r\n                    .attr('x1', '0%')\r\n                    .attr('y1', '0%')\r\n                    .attr('x2', '100%')\r\n                    .attr('y2', '0%');\r\n\r\n                gradient.append('stop')\r\n                    .attr('offset', '0%')\r\n                    .attr('stop-color', this.colorFunctionL(populationStart));\r\n\r\n                gradient.append('stop')\r\n                    .attr('offset', '100%')\r\n                    .attr('stop-color', this.colorFunctionL(populationEnd));\r\n\r\n                // 绘制渐变色块\r\n                legendGradient.append('rect')\r\n                    .attr('x', segmentStart)\r\n                    .attr('y', 0)\r\n                    .attr('width', segmentWidth)\r\n                    .attr('height', legendHeight)\r\n                    .style('fill', `url(#legendGradient${i})`);\r\n\r\n                // 添加白色分隔线\r\n                if (i < numSegments - 1) {\r\n                    legendGradient.append('line')\r\n                        .attr('x1', segmentEnd)\r\n                        .attr('y1', 0)\r\n                        .attr('x2', segmentEnd)\r\n                        .attr('y2', legendHeight)\r\n                        .style('stroke', '#ffffff')\r\n                        .style('stroke-width', 1);\r\n                }\r\n\r\n                // 添加数值标签\r\n                const label = populationEnd < 1000 ? Math.floor(populationEnd) :\r\n                    populationEnd < 1000000 ? Math.floor(populationEnd / 1000) + \"k\" :\r\n                        Math.floor(populationEnd / 1000000) + \"m\"\r\n                this.legend.append('text')\r\n                    .attr('x', segmentEnd)\r\n                    .attr('y', legendHeight + 15)\r\n                    .attr('text-anchor', 'middle')\r\n                    .text(label)\r\n                    .style('font-size', '10px');\r\n            }\r\n        },\r\n        drawColorHueLegend() {\r\n            const legendData = [\r\n                { color: 'rgb(142, 207, 201)', text: '< 5M', minPopulation: 0, maxPopulation: 5000000 },\r\n                { color: 'rgb(255, 190, 122)', text: '5M-10M', minPopulation: 5000000, maxPopulation: 10000000 },\r\n                { color: 'rgb(250, 127, 111)', text: '10M-50M', minPopulation: 10000000, maxPopulation: 50000000 },\r\n                { color: 'rgb(130, 176, 210)', text: '50M-100M', minPopulation: 50000000, maxPopulation: 100000000 },\r\n                { color: 'rgb(190, 184, 220)', text: '>100M', minPopulation: 100000000, maxPopulation: Infinity }\r\n            ];\r\n\r\n            const legendWidth = 20;\r\n            const legendHeight = 20;\r\n            const legendSpacing = 10;\r\n            const legendX = 10; // Starting x position for the legend\r\n            const legendY = 10; // Starting y position for the legend\r\n\r\n            // Create a group for the legend\r\n            // const legend = this.svg.append('g')\r\n            //     .attr('class', 'legend')\r\n            //     .attr('transform', `translate(${legendX},${legendY})`);\r\n\r\n            this.legend.append('g')\r\n                .attr('class', 'legend')\r\n                .attr('transform', `translate(${legendX},${legendY})`);\r\n\r\n            // Add color swatches\r\n            this.legend.selectAll('rect')\r\n                .data(legendData)\r\n                .enter().append('rect')\r\n                .attr('x', (d, i) => i * (legendHeight + legendSpacing) * 2)\r\n                .attr('y', 0)\r\n                .attr('width', legendWidth)\r\n                .attr('height', legendHeight)\r\n                .style('fill', d => d.color);\r\n\r\n            // Add text labels\r\n            this.legend.selectAll('text')\r\n                .data(legendData)\r\n                .enter().append('text')\r\n                .attr('x', (d, i) => i * (legendHeight + legendSpacing) * 2)\r\n                .attr('y', legendWidth + 5)\r\n                .attr('dy', '.35em') // Vertically center\r\n                .style('font-size', '10px')\r\n                .text(d => d.text);\r\n        },\r\n\r\n        doubleEncoding() {\r\n            this.ifDoubleEncoding = !this.ifDoubleEncoding;\r\n            this.ifDoubleEncodingText = this.ifDoubleEncoding ? 'Dual Encoding: ON' : 'Dual Encoding: OFF';\r\n            if (this.ifDoubleEncoding)\r\n                alert('Attention! Only supporting for one color method with one length, size or quantity method.');\r\n        },\r\n\r\n        printSVG() {\r\n            var tempsvg = this.svg;\r\n            tempsvg.selectAll('*')\r\n                .attr('transform', 'translate(0, 10)');\r\n            var legendItems = this.legend.selectAll('*');\r\n\r\n            // 将图形移植到 tempsvg 上\r\n            legendItems.each(function() {\r\n                tempsvg.node().appendChild(this);\r\n            });\r\n            // 选择包含图形的SVG元素\r\n            tempsvg.selectAll('*')\r\n                .attr('transform', 'translate(10, 10)');\r\n            var svgElement = tempsvg.node();\r\n\r\n            // 将SVG内容转换为字符串\r\n            var svgString = new XMLSerializer().serializeToString(svgElement);\r\n\r\n            // 创建Blob对象\r\n            var blob = new Blob([svgString], { type: 'image/svg+xml' });\r\n\r\n            // 创建URL\r\n            var url = window.URL.createObjectURL(blob);\r\n\r\n            // 创建一个a标签用于下载\r\n            var a = document.createElement('a');\r\n            a.href = url;\r\n            a.download = 'd3_chart.svg'; // 下载文件的名称\r\n\r\n            // 模拟点击链接以触发下载\r\n            document.body.appendChild(a);\r\n            a.click();\r\n\r\n            // 清除之前创建的URL对象\r\n            window.URL.revokeObjectURL(url);\r\n\r\n        },\r\n    },\r\n\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n    padding: 0px;\r\n}\r\n\r\n.sub-container {\r\n    border: 1px dotted;\r\n    border-color: #E1CBD8;\r\n}\r\n\r\n.sub-title {\r\n    margin-top: 6px;\r\n    padding: 3px;\r\n    font-size: 14px;\r\n    border-radius: 6px;\r\n    display: block;\r\n    width: fit-content;\r\n    background-color: #E1CBD8;\r\n}\r\n\r\n#sub-title-0 {\r\n    margin-top: 0px;\r\n}\r\n\r\n.element {\r\n    background-color: white;\r\n}\r\n\r\n.element:hover {\r\n    transform: scale(1.12);\r\n    border: 0.67px solid;\r\n    border-color: #E1CBD8;\r\n}\r\n\r\n.row-with-line {\r\n    position: relative; /* 设置相对定位，以便将竖线定位相对于该行 */\r\n}\r\n\r\n.row-with-line::before {\r\n    content: '';\r\n    width: 3px; /* 竖线的宽度 */\r\n    height: 90%; /* 竖线的高度*/\r\n    background-color: pink; /* 竖线的颜色 */\r\n    position: absolute; /* 使竖线定位在行的左侧 */\r\n    left: 0; /* 将竖线定位在行的左侧 */\r\n    top: 0; /* 将竖线定位在行的顶部 */\r\n}\r\n\r\n#myButton {\r\n    border: 2px solid transparent; /* 设置默认的边框，透明色 */\r\n    outline: none;                 /* 取消浏览器默认的焦点轮廓 */\r\n    /* border-color: pink; */\r\n}\r\n\r\n#myButton:hover {\r\n    border-color: pink;  /* 设置选中时的边框颜色为粉色 */\r\n    /*outline: none;      /* 取消浏览器默认的焦点轮廓 */\r\n}\r\n\r\n.matched-heading {\r\n    background-color: pink;\r\n    padding: 10px;\r\n    text-align: center;\r\n}\r\n\r\n.colorfulButton {\r\n    background-color: pink; /* 设置按钮的背景颜色为红色 */\r\n    color: #000000; /* 设置按钮文字颜色为白色 */\r\n    border-radius: 5px;\r\n}\r\n\r\n.button-row {\r\n    margin-bottom: 2px; /* 添加20像素的底部间距 */\r\n}\r\n\r\n</style>","import { render } from \"./instance.vue?vue&type=template&id=2e3ed6ac&scoped=true\"\nimport script from \"./instance.vue?vue&type=script&lang=js\"\nexport * from \"./instance.vue?vue&type=script&lang=js\"\n\nimport \"./instance.vue?vue&type=style&index=0&id=2e3ed6ac&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-2e3ed6ac\"]])\n\nexport default __exports__","<template>\r\n    <v-container>\r\n        <v-row>\r\n            <h1>About</h1>\r\n        </v-row>\r\n    </v-container>\r\n</template>\r\n\r\n<script>\r\n\r\nexport default {\r\n    name: 'aboutTab',\r\n\r\n    data() {\r\n        return {\r\n        };\r\n    },\r\n    methods: {\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n    font-size: 56px;\r\n}\r\n</style>","import { render } from \"./about.vue?vue&type=template&id=1d416a16&scoped=true\"\nimport script from \"./about.vue?vue&type=script&lang=js\"\nexport * from \"./about.vue?vue&type=script&lang=js\"\n\nimport \"./about.vue?vue&type=style&index=0&id=1d416a16&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-1d416a16\"]])\n\nexport default __exports__","<template>\r\n    <v-container>\r\n        <v-row>\r\n            <h1>Gallery</h1>\r\n        </v-row>\r\n    </v-container>\r\n</template>\r\n\r\n<script>\r\n\r\nexport default {\r\n    name: 'galleryTab',\r\n\r\n    data() {\r\n        return {\r\n        };\r\n    },\r\n    methods: {\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n    font-size: 56px;\r\n}\r\n</style>","import { render } from \"./gallery.vue?vue&type=template&id=a4ce095e&scoped=true\"\nimport script from \"./gallery.vue?vue&type=script&lang=js\"\nexport * from \"./gallery.vue?vue&type=script&lang=js\"\n\nimport \"./gallery.vue?vue&type=style&index=0&id=a4ce095e&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-a4ce095e\"]])\n\nexport default __exports__","import { render } from \"./App.vue?vue&type=template&id=a06856d8\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","// Styles\r\nimport '@mdi/font/css/materialdesignicons.css'\r\nimport 'vuetify/styles'\r\n\r\n// Vuetify\r\nimport { createVuetify } from 'vuetify'\r\n\r\nexport default createVuetify(\r\n  // https://vuetifyjs.com/en/introduction/why-vuetify/#feature-guides\r\n)\r\n","/**\r\n * plugins/webfontloader.js\r\n *\r\n * webfontloader documentation: https://github.com/typekit/webfontloader\r\n */\r\n\r\nexport async function loadFonts () {\r\n  const webFontLoader = await import(/* webpackChunkName: \"webfontloader\" */'webfontloader')\r\n\r\n  webFontLoader.load({\r\n    google: {\r\n      families: ['Roboto:100,300,400,500,700,900&display=swap'],\r\n    },\r\n  })\r\n}\r\n","import { createApp } from 'vue'\r\nimport App from './App.vue'\r\nimport vuetify from './plugins/vuetify'\r\nimport { loadFonts } from './plugins/webfontloader'\r\n\r\nloadFonts()\r\n\r\ncreateApp(App)\r\n  .use(vuetify)\r\n  .mount('#app')\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var getProto = Object.getPrototypeOf ? function(obj) { return Object.getPrototypeOf(obj); } : function(obj) { return obj.__proto__; };\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach(function(key) { def[key] = function() { return value[key]; }; });\n\t}\n\tdef['default'] = function() { return value; };\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"js/\" + \"webfontloader\" + \".\" + \"fb94956d\" + \".js\";\n};","// This function allow to reference async chunks\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var inProgress = {};\nvar dataWebpackPrefix = \"geo-info-graphics-v1:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = function(url, done, key, chunkId) {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = function(prev, event) {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach(function(fn) { return fn(event); });\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n__webpack_require__.f.j = function(chunkId, promises) {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise(function(resolve, reject) { installedChunkData = installedChunks[chunkId] = [resolve, reject]; });\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = function(event) {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkgeo_info_graphics_v1\"] = self[\"webpackChunkgeo_info_graphics_v1\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(4002); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["_createBlock","_component_v_app","default","_withCtx","_createVNode","_component_v_main","_component_v_app_bar","elevation","extension","_component_v_tabs","modelValue","$setup","currentItem","_cache","$event","_component_v_tab","value","_component_v_icon","_createTextVNode","_","_createElementBlock","_Fragment","_renderList","items","item","key","_toDisplayString","more","length","_component_v_menu","activator","props","_component_v_btn","_mergeProps","class","height","width","rounded","variant","_component_v_list","_component_v_list_item","onClick","$options","addItem","_createCommentVNode","_component_v_text","_component_v_app_bar_title","_component_v_app_bar_nav_icon","_ctx","drawer","_component_v_window","style","_component_v_window_item","_component_homeTab","concat","_component_instanceTab","geoData","infoData","isNumerical","infoDataType","propName","infoDataName","_component_aboutTab","_component_galleryTab","_createElementVNode","_component_v_container","_component_v_row","_hoisted_1","_component_v_divider","_hoisted_2","_component_v_file_input","$data","files","label","accept","onChange","uploadFile","uploaded","_component_v_col","Object","keys","data","prop","_component_v_select","datatype","color","createInstance","disabled","clear","name","methods","this","targetKey","readFile","file","Promise","resolve","reject","reader","FileReader","onload","e","fileContents","target","result","d3","then","find","reduce","acc","cur","isNaN","values","catch","error","console","readAsDataURL","log","loadInfoData","setup","inject","__exports__","_component_v_card","ref","id","$props","_component_v_expansion_panels","_component_v_expansion_panel","_component_v_expansion_panel_title","_component_v_expansion_panel_text","setRepresentation","myType","_component_v_img","src","require","contain","setProjection","type","ifDoubleEncodingText","doubleEncoding","removeText","setEncodingChannel","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","removeTextLabel","setLabelPosition","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","removeTextHighlight","setHighlight","printText","printSVG","_normalizeClass","_hoisted_13","_component_v_dialog","errorDialog","title","errorTitle","text","errorMessage","actions","required","String","Boolean","representationType","projectionType","labelPositionType","encodingChannelType","highLightType","worldPopulation","mostPopulation","svg","legend","mapWidth","mapHeight","legendWidth","defaultColor","ifDoubleEncoding","preEncoding","preColortype","encodingChannel","representation","LabelPosition","colorFunctionL","highLights","pointer2highlight","mounted","features","forEach","feature","curPopulation","getPopulation","cardEl","$refs","selectorCard","$el","legendColEl","legendCol","$nextTick","clientHeight","seContainer","document","getElementById","maxHeight","clientWidth","initMap","push","node","getBoundingClientRect","selectAll","attr","enter","append","geoPath","drawSvg","splitTextToLines","maxLineWidth","words","split","lines","currentLine","i","remove","highLight","loadJson","na","d","properties","NAME","showErrorDialog","msg","bounds","left","bottom","geoProjection","right","top","w","h","rows","Math","ceil","columns","pointRadius","points","j","x","y","point","invert","join","addHighLight","classed","on","fitSize","projection","event","datum","originalColor","defs","filter","feMerge","enlargedView","enlargedViewSvg","clipPath","html","x1","y1","r1","r","sqrt","xa","cos","atan","acos","ya","sin","xb","yb","xc","yc","xd","yd","boxWidth","boxHeight","boxSpacing","center","centroid","annotation","textLines","city","summer_olympics","winter_olympics","currentYOffset","line","subLines","subLine","annotatedFeatures","index","totalAnnotationsWidth","startX","annotationX","annotationY","lineIndex","flag_base64","countryColors","getCountryColor","fillColor","totalAnnotations","annotationsPerSide","bottomAnnotationsCount","rightAnnotationsCount","countryCenter","lineLength","distanceToLeft","distanceToBottom","distanceToRight","edge","minDistance","leftAnnotationsCount","lineEndX","lineEndY","textOffsetX","textOffsetY","sortedFeatures","sort","a","b","centerA","centerB","circleCenterX","circleCenterY","radius","min","angleIncrement","PI","angle","colorFunction","scale","transformFunction","input","pow","colorScale","domain","drawColorLuminanceLegend","population","drawColorHueLegend","baseHeight","populationPerHeight","cuboidWidth","cuboidLength","sideOpacity","delta","px","t","v","floor","populationExtent","sizeScale","range","py","iconWidth","iconHeight","iconGap","scaleX","scaleY","totalIcons","g","gd","flagBase64","countries","map","customColors","legendHeight","numSegments","segmentWidth","populationWidth","legendGradient","segmentStart","segmentEnd","populationStart","populationEnd","gradient","legendData","minPopulation","maxPopulation","Infinity","legendSpacing","legendX","legendY","alert","tempsvg","legendItems","each","appendChild","svgElement","svgString","XMLSerializer","serializeToString","blob","Blob","url","window","URL","createObjectURL","createElement","href","download","body","click","revokeObjectURL","components","homeTab","instanceTab","aboutTab","galleryTab","currentItemAbout","currentItemGallery","uniqueName","namesArray","newName","replace","count","includes","all","annotationData","annotationInfo","country","unshift","provide","removed","splice","indexOf","render","createVuetify","async","loadFonts","webFontLoader","load","google","families","createApp","App","use","vuetify","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","m","deferred","O","chunkIds","fn","priority","notFulfilled","fulfilled","every","leafPrototypes","getProto","getPrototypeOf","obj","__proto__","mode","__esModule","ns","create","def","current","getOwnPropertyNames","definition","o","defineProperty","enumerable","get","f","chunkId","promises","u","miniCssF","globalThis","Function","prototype","hasOwnProperty","inProgress","dataWebpackPrefix","l","done","script","needAttach","scripts","getElementsByTagName","s","getAttribute","charset","timeout","nc","setAttribute","onScriptComplete","prev","onerror","clearTimeout","doneFns","parentNode","removeChild","setTimeout","bind","head","Symbol","toStringTag","p","installedChunks","installedChunkData","promise","Error","loadingEnded","errorType","realSrc","message","request","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","__webpack_exports__"],"sourceRoot":""}